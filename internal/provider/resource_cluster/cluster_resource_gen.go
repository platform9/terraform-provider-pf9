// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_cluster

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ClusterResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allow_workloads_on_master": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If the master nodes can run non-critical workloads",
				MarkdownDescription: "If the master nodes can run non-critical workloads",
				Default:             booldefault.StaticBool(false),
			},
			"calico_ip_ip_mode": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "IP-IP encapsulation mode for Calico network. Choose: Always, Never, CrossSubnet",
				MarkdownDescription: "IP-IP encapsulation mode for Calico network. Choose: Always, Never, CrossSubnet",
				Validators: []validator.String{
					stringvalidator.OneOf("Always", "Never", "CrossSubnet"),
				},
				Default: stringdefault.StaticString("Always"),
			},
			"calico_ipv4_detection_method": schema.StringAttribute{
				Optional:            true,
				Description:         "Method to detect the IPv4 address",
				MarkdownDescription: "Method to detect the IPv4 address",
			},
			"calico_nat_outgoing": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Field is set to true if Calico nodes need to NAT north-south egress traffic.",
				MarkdownDescription: "Field is set to true if Calico nodes need to NAT north-south egress traffic.",
				Default:             booldefault.StaticBool(true),
			},
			"calico_v4_block_size": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Subnet size per node for the Calico network, in CIDR notation (e.g. 26)",
				MarkdownDescription: "Subnet size per node for the Calico network, in CIDR notation (e.g. 26)",
				Default:             stringdefault.StaticString("26"),
			},
			"container_runtime": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Container runtime used by this cluster",
				MarkdownDescription: "Container runtime used by this cluster",
				Validators: []validator.String{
					stringvalidator.OneOf("containerd"),
				},
				Default: stringdefault.StaticString("containerd"),
			},
			"containers_cidr": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "CIDR used for pod IP addresses, applicable also for manual deploy",
				MarkdownDescription: "CIDR used for pod IP addresses, applicable also for manual deploy",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Default: stringdefault.StaticString("10.20.0.0/16"),
			},
			"cpu_manager_policy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "options: none, static; default: none",
				MarkdownDescription: "options: none, static; default: none",
				Validators: []validator.String{
					stringvalidator.OneOf("none", "static"),
				},
				Default: stringdefault.StaticString("none"),
			},
			"deploy_luigi_operator": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If set to true, deploy Luigi operator on the cluster",
				MarkdownDescription: "If set to true, deploy Luigi operator on the cluster",
				Default:             booldefault.StaticBool(false),
			},
			"etcd_backup": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"daily_backup_time": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "etcd backup Timestamp for daily backup, specified in format 'HH:MM' ",
						MarkdownDescription: "etcd backup Timestamp for daily backup, specified in format 'HH:MM' ",
						Default:             stringdefault.StaticString("02:00"),
					},
					"is_etcd_backup_enabled": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Set to true if etcd backup should be enabled, false otherwise",
						MarkdownDescription: "Set to true if etcd backup should be enabled, false otherwise",
						Default:             booldefault.StaticBool(true),
					},
					"max_timestamp_backup_count": schema.Int64Attribute{
						Optional:            true,
						Computed:            true,
						Description:         "max number of Backups retention for Timestamp type backups, required if dailyBackupTime is provided",
						MarkdownDescription: "max number of Backups retention for Timestamp type backups, required if dailyBackupTime is provided",
						Default:             int64default.StaticInt64(3),
					},
					"storage_local_path": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Path on the local filesystem where the etcd backup should be stored. For 'local' storage type only.",
						MarkdownDescription: "Path on the local filesystem where the etcd backup should be stored. For 'local' storage type only.",
						Default:             stringdefault.StaticString("/etc/pf9/etcd-backup"),
					},
					"storage_type": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Type of storage to be used for etcd backup. Supported choices are local, s3, gcs",
						MarkdownDescription: "Type of storage to be used for etcd backup. Supported choices are local, s3, gcs",
						Default:             stringdefault.StaticString("local"),
					},
				},
				CustomType: EtcdBackupType{
					ObjectType: types.ObjectType{
						AttrTypes: EtcdBackupValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "UUID of the cluster",
				MarkdownDescription: "UUID of the cluster",
			},
			"interface_detection_method": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Method to detect the interface",
				MarkdownDescription: "Method to detect the interface",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Default: stringdefault.StaticString("first-found"),
			},
			"interface_name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Name of the interface",
				MarkdownDescription: "Name of the interface",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Default: stringdefault.StaticString(""),
			},
			"kube_role_version": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "kube role version to be used when bringing up the cluster.",
				MarkdownDescription: "kube role version to be used when bringing up the cluster.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"master_ip": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "IP of master node",
				MarkdownDescription: "IP of master node",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"master_nodes": schema.SetAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "List of uuid of master nodes",
				MarkdownDescription: "List of uuid of master nodes",
			},
			"master_vip_iface": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If masterVipIpv4 is specified, this field is required. Specify the interface that the VIP attaches to",
				MarkdownDescription: "If masterVipIpv4 is specified, this field is required. Specify the interface that the VIP attaches to",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"master_vip_ipv4": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "API server Virtual IP that provides failover. When specified, deploy keepalived setup to cluster master nodes together",
				MarkdownDescription: "API server Virtual IP that provides failover. When specified, deploy keepalived setup to cluster master nodes together",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"monitoring": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"retention_time": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Retention time for monitoring data",
						MarkdownDescription: "Retention time for monitoring data",
						Default:             stringdefault.StaticString("7d"),
					},
				},
				CustomType: MonitoringType{
					ObjectType: types.ObjectType{
						AttrTypes: MonitoringValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
			},
			"mtu_size": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "MTU for container network interfaces. Optional and used for the Calico network backend",
				MarkdownDescription: "MTU for container network interfaces. Optional and used for the Calico network backend",
				Default:             int64default.StaticInt64(1440),
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the cluster, applicable also for manual deploy",
				MarkdownDescription: "Name of the cluster, applicable also for manual deploy",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"network_plugin": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Network backend to use for container networking. Defaults to flannel. Supported choices are flannel, calico",
				MarkdownDescription: "Network backend to use for container networking. Defaults to flannel. Supported choices are flannel, calico",
				Validators: []validator.String{
					stringvalidator.OneOf("calico", "flannel"),
				},
				Default: stringdefault.StaticString("calico"),
			},
			"node_pool_uuid": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "UUID of the node pool used for the cluster, applicable also for manual deploy",
				MarkdownDescription: "UUID of the node pool used for the cluster, applicable also for manual deploy",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"privileged": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "True if cluster runs privileged containers",
				MarkdownDescription: "True if cluster runs privileged containers",
				Default:             booldefault.StaticBool(true),
			},
			"runtime_config": schema.StringAttribute{
				Optional:            true,
				Description:         "Applicable also for manual deploy",
				MarkdownDescription: "Applicable also for manual deploy",
			},
			"services_cidr": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "CIDR used for service IP addresses, applicable also for manual deploy",
				MarkdownDescription: "CIDR used for service IP addresses, applicable also for manual deploy",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Default: stringdefault.StaticString("10.21.0.0/16"),
			},
			"tags": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "User defined key-value pairs represented as a JSON object",
				MarkdownDescription: "User defined key-value pairs represented as a JSON object",
			},
			"topology_manager_policy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "options: none, best-effort, restricted, single-numa-node; default: none",
				MarkdownDescription: "options: none, best-effort, restricted, single-numa-node; default: none",
				Validators: []validator.String{
					stringvalidator.OneOf("none", "best-effort", "restricted", "single-numa-node"),
				},
				Default: stringdefault.StaticString("none"),
			},
			"use_hostname": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If set to true nodes will be registered in the cluster using hostname instead of IP address. This option is only applicable to IPv4 hosts.",
				MarkdownDescription: "If set to true nodes will be registered in the cluster using hostname instead of IP address. This option is only applicable to IPv4 hosts.",
				Default:             booldefault.StaticBool(false),
			},
			"worker_nodes": schema.SetAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "List of uuid of worker nodes",
				MarkdownDescription: "List of uuid of worker nodes",
			},
		},
	}
}

type ClusterModel struct {
	AllowWorkloadsOnMaster    types.Bool      `tfsdk:"allow_workloads_on_master"`
	CalicoIpIpMode            types.String    `tfsdk:"calico_ip_ip_mode"`
	CalicoIpv4DetectionMethod types.String    `tfsdk:"calico_ipv4_detection_method"`
	CalicoNatOutgoing         types.Bool      `tfsdk:"calico_nat_outgoing"`
	CalicoV4BlockSize         types.String    `tfsdk:"calico_v4_block_size"`
	ContainerRuntime          types.String    `tfsdk:"container_runtime"`
	ContainersCidr            types.String    `tfsdk:"containers_cidr"`
	CpuManagerPolicy          types.String    `tfsdk:"cpu_manager_policy"`
	DeployLuigiOperator       types.Bool      `tfsdk:"deploy_luigi_operator"`
	EtcdBackup                EtcdBackupValue `tfsdk:"etcd_backup"`
	Id                        types.String    `tfsdk:"id"`
	InterfaceDetectionMethod  types.String    `tfsdk:"interface_detection_method"`
	InterfaceName             types.String    `tfsdk:"interface_name"`
	KubeRoleVersion           types.String    `tfsdk:"kube_role_version"`
	MasterIp                  types.String    `tfsdk:"master_ip"`
	MasterNodes               types.Set       `tfsdk:"master_nodes"`
	MasterVipIface            types.String    `tfsdk:"master_vip_iface"`
	MasterVipIpv4             types.String    `tfsdk:"master_vip_ipv4"`
	Monitoring                MonitoringValue `tfsdk:"monitoring"`
	MtuSize                   types.Int64     `tfsdk:"mtu_size"`
	Name                      types.String    `tfsdk:"name"`
	NetworkPlugin             types.String    `tfsdk:"network_plugin"`
	NodePoolUuid              types.String    `tfsdk:"node_pool_uuid"`
	Privileged                types.Bool      `tfsdk:"privileged"`
	RuntimeConfig             types.String    `tfsdk:"runtime_config"`
	ServicesCidr              types.String    `tfsdk:"services_cidr"`
	Tags                      types.Map       `tfsdk:"tags"`
	TopologyManagerPolicy     types.String    `tfsdk:"topology_manager_policy"`
	UseHostname               types.Bool      `tfsdk:"use_hostname"`
	WorkerNodes               types.Set       `tfsdk:"worker_nodes"`
}

var _ basetypes.ObjectTypable = EtcdBackupType{}

type EtcdBackupType struct {
	basetypes.ObjectType
}

func (t EtcdBackupType) Equal(o attr.Type) bool {
	other, ok := o.(EtcdBackupType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t EtcdBackupType) String() string {
	return "EtcdBackupType"
}

func (t EtcdBackupType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dailyBackupTimeAttribute, ok := attributes["daily_backup_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`daily_backup_time is missing from object`)

		return nil, diags
	}

	dailyBackupTimeVal, ok := dailyBackupTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`daily_backup_time expected to be basetypes.StringValue, was: %T`, dailyBackupTimeAttribute))
	}

	isEtcdBackupEnabledAttribute, ok := attributes["is_etcd_backup_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_etcd_backup_enabled is missing from object`)

		return nil, diags
	}

	isEtcdBackupEnabledVal, ok := isEtcdBackupEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_etcd_backup_enabled expected to be basetypes.BoolValue, was: %T`, isEtcdBackupEnabledAttribute))
	}

	maxTimestampBackupCountAttribute, ok := attributes["max_timestamp_backup_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_timestamp_backup_count is missing from object`)

		return nil, diags
	}

	maxTimestampBackupCountVal, ok := maxTimestampBackupCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_timestamp_backup_count expected to be basetypes.Int64Value, was: %T`, maxTimestampBackupCountAttribute))
	}

	storageLocalPathAttribute, ok := attributes["storage_local_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_local_path is missing from object`)

		return nil, diags
	}

	storageLocalPathVal, ok := storageLocalPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_local_path expected to be basetypes.StringValue, was: %T`, storageLocalPathAttribute))
	}

	storageTypeAttribute, ok := attributes["storage_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_type is missing from object`)

		return nil, diags
	}

	storageTypeVal, ok := storageTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_type expected to be basetypes.StringValue, was: %T`, storageTypeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return EtcdBackupValue{
		DailyBackupTime:         dailyBackupTimeVal,
		IsEtcdBackupEnabled:     isEtcdBackupEnabledVal,
		MaxTimestampBackupCount: maxTimestampBackupCountVal,
		StorageLocalPath:        storageLocalPathVal,
		StorageType:             storageTypeVal,
		state:                   attr.ValueStateKnown,
	}, diags
}

func NewEtcdBackupValueNull() EtcdBackupValue {
	return EtcdBackupValue{
		state: attr.ValueStateNull,
	}
}

func NewEtcdBackupValueUnknown() EtcdBackupValue {
	return EtcdBackupValue{
		state: attr.ValueStateUnknown,
	}
}

func NewEtcdBackupValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (EtcdBackupValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing EtcdBackupValue Attribute Value",
				"While creating a EtcdBackupValue value, a missing attribute value was detected. "+
					"A EtcdBackupValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EtcdBackupValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid EtcdBackupValue Attribute Type",
				"While creating a EtcdBackupValue value, an invalid attribute value was detected. "+
					"A EtcdBackupValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EtcdBackupValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("EtcdBackupValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra EtcdBackupValue Attribute Value",
				"While creating a EtcdBackupValue value, an extra attribute value was detected. "+
					"A EtcdBackupValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra EtcdBackupValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewEtcdBackupValueUnknown(), diags
	}

	dailyBackupTimeAttribute, ok := attributes["daily_backup_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`daily_backup_time is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	dailyBackupTimeVal, ok := dailyBackupTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`daily_backup_time expected to be basetypes.StringValue, was: %T`, dailyBackupTimeAttribute))
	}

	isEtcdBackupEnabledAttribute, ok := attributes["is_etcd_backup_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_etcd_backup_enabled is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	isEtcdBackupEnabledVal, ok := isEtcdBackupEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_etcd_backup_enabled expected to be basetypes.BoolValue, was: %T`, isEtcdBackupEnabledAttribute))
	}

	maxTimestampBackupCountAttribute, ok := attributes["max_timestamp_backup_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_timestamp_backup_count is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	maxTimestampBackupCountVal, ok := maxTimestampBackupCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_timestamp_backup_count expected to be basetypes.Int64Value, was: %T`, maxTimestampBackupCountAttribute))
	}

	storageLocalPathAttribute, ok := attributes["storage_local_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_local_path is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	storageLocalPathVal, ok := storageLocalPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_local_path expected to be basetypes.StringValue, was: %T`, storageLocalPathAttribute))
	}

	storageTypeAttribute, ok := attributes["storage_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_type is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	storageTypeVal, ok := storageTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_type expected to be basetypes.StringValue, was: %T`, storageTypeAttribute))
	}

	if diags.HasError() {
		return NewEtcdBackupValueUnknown(), diags
	}

	return EtcdBackupValue{
		DailyBackupTime:         dailyBackupTimeVal,
		IsEtcdBackupEnabled:     isEtcdBackupEnabledVal,
		MaxTimestampBackupCount: maxTimestampBackupCountVal,
		StorageLocalPath:        storageLocalPathVal,
		StorageType:             storageTypeVal,
		state:                   attr.ValueStateKnown,
	}, diags
}

func NewEtcdBackupValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) EtcdBackupValue {
	object, diags := NewEtcdBackupValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewEtcdBackupValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t EtcdBackupType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewEtcdBackupValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewEtcdBackupValueUnknown(), nil
	}

	if in.IsNull() {
		return NewEtcdBackupValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewEtcdBackupValueMust(EtcdBackupValue{}.AttributeTypes(ctx), attributes), nil
}

func (t EtcdBackupType) ValueType(ctx context.Context) attr.Value {
	return EtcdBackupValue{}
}

var _ basetypes.ObjectValuable = EtcdBackupValue{}

type EtcdBackupValue struct {
	DailyBackupTime         basetypes.StringValue `tfsdk:"daily_backup_time"`
	IsEtcdBackupEnabled     basetypes.BoolValue   `tfsdk:"is_etcd_backup_enabled"`
	MaxTimestampBackupCount basetypes.Int64Value  `tfsdk:"max_timestamp_backup_count"`
	StorageLocalPath        basetypes.StringValue `tfsdk:"storage_local_path"`
	StorageType             basetypes.StringValue `tfsdk:"storage_type"`
	state                   attr.ValueState
}

func (v EtcdBackupValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["daily_backup_time"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["is_etcd_backup_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["max_timestamp_backup_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["storage_local_path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["storage_type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.DailyBackupTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["daily_backup_time"] = val

		val, err = v.IsEtcdBackupEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_etcd_backup_enabled"] = val

		val, err = v.MaxTimestampBackupCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_timestamp_backup_count"] = val

		val, err = v.StorageLocalPath.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["storage_local_path"] = val

		val, err = v.StorageType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["storage_type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v EtcdBackupValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v EtcdBackupValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v EtcdBackupValue) String() string {
	return "EtcdBackupValue"
}

func (v EtcdBackupValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"daily_backup_time":          basetypes.StringType{},
			"is_etcd_backup_enabled":     basetypes.BoolType{},
			"max_timestamp_backup_count": basetypes.Int64Type{},
			"storage_local_path":         basetypes.StringType{},
			"storage_type":               basetypes.StringType{},
		},
		map[string]attr.Value{
			"daily_backup_time":          v.DailyBackupTime,
			"is_etcd_backup_enabled":     v.IsEtcdBackupEnabled,
			"max_timestamp_backup_count": v.MaxTimestampBackupCount,
			"storage_local_path":         v.StorageLocalPath,
			"storage_type":               v.StorageType,
		})

	return objVal, diags
}

func (v EtcdBackupValue) Equal(o attr.Value) bool {
	other, ok := o.(EtcdBackupValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DailyBackupTime.Equal(other.DailyBackupTime) {
		return false
	}

	if !v.IsEtcdBackupEnabled.Equal(other.IsEtcdBackupEnabled) {
		return false
	}

	if !v.MaxTimestampBackupCount.Equal(other.MaxTimestampBackupCount) {
		return false
	}

	if !v.StorageLocalPath.Equal(other.StorageLocalPath) {
		return false
	}

	if !v.StorageType.Equal(other.StorageType) {
		return false
	}

	return true
}

func (v EtcdBackupValue) Type(ctx context.Context) attr.Type {
	return EtcdBackupType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v EtcdBackupValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"daily_backup_time":          basetypes.StringType{},
		"is_etcd_backup_enabled":     basetypes.BoolType{},
		"max_timestamp_backup_count": basetypes.Int64Type{},
		"storage_local_path":         basetypes.StringType{},
		"storage_type":               basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MonitoringType{}

type MonitoringType struct {
	basetypes.ObjectType
}

func (t MonitoringType) Equal(o attr.Type) bool {
	other, ok := o.(MonitoringType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MonitoringType) String() string {
	return "MonitoringType"
}

func (t MonitoringType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	retentionTimeAttribute, ok := attributes["retention_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`retention_time is missing from object`)

		return nil, diags
	}

	retentionTimeVal, ok := retentionTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`retention_time expected to be basetypes.StringValue, was: %T`, retentionTimeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MonitoringValue{
		RetentionTime: retentionTimeVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewMonitoringValueNull() MonitoringValue {
	return MonitoringValue{
		state: attr.ValueStateNull,
	}
}

func NewMonitoringValueUnknown() MonitoringValue {
	return MonitoringValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMonitoringValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MonitoringValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MonitoringValue Attribute Value",
				"While creating a MonitoringValue value, a missing attribute value was detected. "+
					"A MonitoringValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MonitoringValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MonitoringValue Attribute Type",
				"While creating a MonitoringValue value, an invalid attribute value was detected. "+
					"A MonitoringValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MonitoringValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MonitoringValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MonitoringValue Attribute Value",
				"While creating a MonitoringValue value, an extra attribute value was detected. "+
					"A MonitoringValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MonitoringValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMonitoringValueUnknown(), diags
	}

	retentionTimeAttribute, ok := attributes["retention_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`retention_time is missing from object`)

		return NewMonitoringValueUnknown(), diags
	}

	retentionTimeVal, ok := retentionTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`retention_time expected to be basetypes.StringValue, was: %T`, retentionTimeAttribute))
	}

	if diags.HasError() {
		return NewMonitoringValueUnknown(), diags
	}

	return MonitoringValue{
		RetentionTime: retentionTimeVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewMonitoringValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MonitoringValue {
	object, diags := NewMonitoringValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMonitoringValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MonitoringType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMonitoringValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMonitoringValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMonitoringValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMonitoringValueMust(MonitoringValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MonitoringType) ValueType(ctx context.Context) attr.Value {
	return MonitoringValue{}
}

var _ basetypes.ObjectValuable = MonitoringValue{}

type MonitoringValue struct {
	RetentionTime basetypes.StringValue `tfsdk:"retention_time"`
	state         attr.ValueState
}

func (v MonitoringValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 1)

	var val tftypes.Value
	var err error

	attrTypes["retention_time"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 1)

		val, err = v.RetentionTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["retention_time"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MonitoringValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MonitoringValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MonitoringValue) String() string {
	return "MonitoringValue"
}

func (v MonitoringValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"retention_time": basetypes.StringType{},
		},
		map[string]attr.Value{
			"retention_time": v.RetentionTime,
		})

	return objVal, diags
}

func (v MonitoringValue) Equal(o attr.Value) bool {
	other, ok := o.(MonitoringValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.RetentionTime.Equal(other.RetentionTime) {
		return false
	}

	return true
}

func (v MonitoringValue) Type(ctx context.Context) attr.Type {
	return MonitoringType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MonitoringValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"retention_time": basetypes.StringType{},
	}
}
