// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_cluster

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"regexp"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func ClusterResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"addon_operator_image_tag": schema.StringAttribute{
				Optional:            true,
				Description:         "Tag of the addon operator image to be used for the cluster",
				MarkdownDescription: "Tag of the addon operator image to be used for the cluster",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"addons": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"coredns": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"is_enabled": schema.BoolAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.UseStateForUnknown(),
								},
								Default: booldefault.StaticBool(true),
							},
							"params": schema.MapAttribute{
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.UseStateForUnknown(),
								},
							},
							"phase": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.UseStateForUnknown(),
								},
							},
						},
						CustomType: CorednsType{
							ObjectType: types.ObjectType{
								AttrTypes: CorednsValue{}.AttributeTypes(ctx),
							},
						},
						Required: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},
					"dashboard": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"is_enabled": schema.BoolAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.UseStateForUnknown(),
								},
								Default: booldefault.StaticBool(true),
							},
							"params": schema.MapAttribute{
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.UseStateForUnknown(),
								},
							},
							"phase": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.UseStateForUnknown(),
								},
							},
						},
						CustomType: DashboardType{
							ObjectType: types.ObjectType{
								AttrTypes: DashboardValue{}.AttributeTypes(ctx),
							},
						},
						Required: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},
					"dns_autoscaler": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"is_enabled": schema.BoolAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.UseStateForUnknown(),
								},
								Default: booldefault.StaticBool(false),
							},
							"params": schema.MapAttribute{
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.UseStateForUnknown(),
								},
							},
							"phase": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.UseStateForUnknown(),
								},
							},
						},
						CustomType: DnsAutoscalerType{
							ObjectType: types.ObjectType{
								AttrTypes: DnsAutoscalerValue{}.AttributeTypes(ctx),
							},
						},
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},
					"kubevirt": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"is_enabled": schema.BoolAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.UseStateForUnknown(),
								},
								Default: booldefault.StaticBool(false),
							},
							"params": schema.MapAttribute{
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.UseStateForUnknown(),
								},
							},
							"phase": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.UseStateForUnknown(),
								},
							},
						},
						CustomType: KubevirtType{
							ObjectType: types.ObjectType{
								AttrTypes: KubevirtValue{}.AttributeTypes(ctx),
							},
						},
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},
					"luigi": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"is_enabled": schema.BoolAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.UseStateForUnknown(),
								},
								Default: booldefault.StaticBool(false),
							},
							"params": schema.MapAttribute{
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.UseStateForUnknown(),
								},
							},
							"phase": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.UseStateForUnknown(),
								},
							},
						},
						CustomType: LuigiType{
							ObjectType: types.ObjectType{
								AttrTypes: LuigiValue{}.AttributeTypes(ctx),
							},
						},
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},
					"metal3": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"is_enabled": schema.BoolAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.UseStateForUnknown(),
								},
								Default: booldefault.StaticBool(false),
							},
							"params": schema.MapAttribute{
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.UseStateForUnknown(),
								},
							},
							"phase": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.UseStateForUnknown(),
								},
							},
						},
						CustomType: Metal3Type{
							ObjectType: types.ObjectType{
								AttrTypes: Metal3Value{}.AttributeTypes(ctx),
							},
						},
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},
					"metallb": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"is_enabled": schema.BoolAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.UseStateForUnknown(),
								},
								Default: booldefault.StaticBool(false),
							},
							"params": schema.MapAttribute{
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.UseStateForUnknown(),
								},
							},
							"phase": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.UseStateForUnknown(),
								},
							},
						},
						CustomType: MetallbType{
							ObjectType: types.ObjectType{
								AttrTypes: MetallbValue{}.AttributeTypes(ctx),
							},
						},
						Optional: true,
						Computed: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},
					"metrics_server": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"is_enabled": schema.BoolAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.UseStateForUnknown(),
								},
								Default: booldefault.StaticBool(true),
							},
							"params": schema.MapAttribute{
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.UseStateForUnknown(),
								},
							},
							"phase": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.UseStateForUnknown(),
								},
							},
						},
						CustomType: MetricsServerType{
							ObjectType: types.ObjectType{
								AttrTypes: MetricsServerValue{}.AttributeTypes(ctx),
							},
						},
						Required: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},
					"monitoring": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"is_enabled": schema.BoolAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.Bool{
									boolplanmodifier.UseStateForUnknown(),
								},
								Default: booldefault.StaticBool(true),
							},
							"params": schema.MapAttribute{
								ElementType: types.StringType,
								Optional:    true,
								Computed:    true,
								PlanModifiers: []planmodifier.Map{
									mapplanmodifier.UseStateForUnknown(),
								},
							},
							"phase": schema.StringAttribute{
								Computed: true,
							},
							"version": schema.StringAttribute{
								Optional: true,
								Computed: true,
								PlanModifiers: []planmodifier.String{
									stringplanmodifier.UseStateForUnknown(),
								},
							},
						},
						CustomType: MonitoringType{
							ObjectType: types.ObjectType{
								AttrTypes: MonitoringValue{}.AttributeTypes(ctx),
							},
						},
						Required: true,
						PlanModifiers: []planmodifier.Object{
							objectplanmodifier.UseStateForUnknown(),
						},
					},
				},
				CustomType: AddonsType{
					ObjectType: types.ObjectType{
						AttrTypes: AddonsValue{}.AttributeTypes(ctx),
					},
				},
				Required: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.UseStateForUnknown(),
				},
			},
			"allow_workloads_on_master": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If the master nodes can run non-critical workloads",
				MarkdownDescription: "If the master nodes can run non-critical workloads",
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
					boolplanmodifier.RequiresReplace(),
				},
				Default: booldefault.StaticBool(false),
			},
			"calico_controller_cpu_limit": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Corresponds to the CALICO_CONTROLLER_CPU_LIMIT environment variable in Calico.",
				MarkdownDescription: "Corresponds to the CALICO_CONTROLLER_CPU_LIMIT environment variable in Calico.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"calico_controller_memory_limit": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Corresponds to the CALICO_CONTROLLER_MEMORY_LIMIT environment variable in Calico.",
				MarkdownDescription: "Corresponds to the CALICO_CONTROLLER_MEMORY_LIMIT environment variable in Calico.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"calico_ip_ip_mode": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "IP-IP encapsulation mode for Calico network. Choose: Always, Never, CrossSubnet",
				MarkdownDescription: "IP-IP encapsulation mode for Calico network. Choose: Always, Never, CrossSubnet",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("Always", "Never", "CrossSubnet"),
				},
				Default: stringdefault.StaticString("Always"),
			},
			"calico_ipv4": schema.StringAttribute{
				Computed: true,
			},
			"calico_ipv4_detection_method": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Method to detect the IPv4 address",
				MarkdownDescription: "Method to detect the IPv4 address",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Default: stringdefault.StaticString("first-found"),
			},
			"calico_ipv6": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"calico_ipv6_detection_method": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"calico_ipv6_pool_block_size": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"calico_ipv6_pool_cidr": schema.StringAttribute{
				Optional: true,
			},
			"calico_ipv6_pool_nat_outgoing": schema.BoolAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
				},
			},
			"calico_nat_outgoing": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Field is set to true if Calico nodes need to NAT north-south egress traffic.",
				MarkdownDescription: "Field is set to true if Calico nodes need to NAT north-south egress traffic.",
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
				},
				Default: booldefault.StaticBool(true),
			},
			"calico_node_cpu_limit": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Corresponds to the CALICO_NODE_CPU_LIMIT environment variable in Calico.",
				MarkdownDescription: "Corresponds to the CALICO_NODE_CPU_LIMIT environment variable in Calico.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"calico_node_memory_limit": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Corresponds to the CALICO_NODE_MEMORY_LIMIT environment variable in Calico.",
				MarkdownDescription: "Corresponds to the CALICO_NODE_MEMORY_LIMIT environment variable in Calico.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"calico_router_id": schema.StringAttribute{
				Computed: true,
			},
			"calico_typha_cpu_limit": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Corresponds to the CALICO_TYPHA_CPU_LIMIT environment variable in Calico.",
				MarkdownDescription: "Corresponds to the CALICO_TYPHA_CPU_LIMIT environment variable in Calico.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"calico_typha_memory_limit": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Corresponds to the CALICO_TYPHA_MEMORY_LIMIT environment variable in Calico.",
				MarkdownDescription: "Corresponds to the CALICO_TYPHA_MEMORY_LIMIT environment variable in Calico.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"calico_v4_block_size": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Subnet size per node for the Calico network, in CIDR notation (e.g. 26)",
				MarkdownDescription: "Subnet size per node for the Calico network, in CIDR notation (e.g. 26)",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Default: stringdefault.StaticString("26"),
			},
			"cert_expiry_hrs": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "Number of hours before user certificates in kubeconfig expires, should be greater than 0 if set",
				MarkdownDescription: "Number of hours before user certificates in kubeconfig expires, should be greater than 0 if set",
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.UseStateForUnknown(),
				},
				Validators: []validator.Int64{
					int64validator.AtLeast(1),
				},
			},
			"cloud_provider_name": schema.StringAttribute{
				Computed: true,
			},
			"cloud_provider_type": schema.StringAttribute{
				Computed: true,
			},
			"cloud_provider_uuid": schema.StringAttribute{
				Computed: true,
			},
			"container_runtime": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Container runtime used by this cluster",
				MarkdownDescription: "Container runtime used by this cluster",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("containerd"),
				},
				Default: stringdefault.StaticString("containerd"),
			},
			"containers_cidr": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "CIDR used for pod IP addresses, applicable also for manual deploy",
				MarkdownDescription: "CIDR used for pod IP addresses, applicable also for manual deploy",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Default: stringdefault.StaticString("10.20.0.0/16"),
			},
			"cpu_manager_policy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "options: none, static; default: none",
				MarkdownDescription: "options: none, static; default: none",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("none", "static"),
				},
				Default: stringdefault.StaticString("none"),
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "Time at which the cluster was created",
				MarkdownDescription: "Time at which the cluster was created",
			},
			"custom_registry_cert_path": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"custom_registry_password": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"custom_registry_repo_path": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"custom_registry_self_signed_certs": schema.BoolAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
				},
			},
			"custom_registry_skip_tls": schema.BoolAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
				},
			},
			"custom_registry_url": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"custom_registry_username": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"docker_centos_package_repo_url": schema.StringAttribute{
				Computed: true,
			},
			"docker_private_registry": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"docker_root": schema.StringAttribute{
				Computed: true,
			},
			"docker_ubuntu_package_repo_url": schema.StringAttribute{
				Computed: true,
			},
			"enable_etcd_encryption": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Enables etcd encryption",
				MarkdownDescription: "Enables etcd encryption",
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
					boolplanmodifier.RequiresReplace(),
				},
				Default: booldefault.StaticBool(true),
			},
			"etcd_backup": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"daily_backup_time": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "etcd backup Timestamp for daily backup, specified in format 'HH:MM'",
						MarkdownDescription: "etcd backup Timestamp for daily backup, specified in format 'HH:MM'",
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
						},
						Validators: []validator.String{
							stringvalidator.RegexMatches(regexp.MustCompile(`^(?:[0-1][0-9]|2[0-3]):[0-5][0-9]$`), "Must be a valid time in HH:MM format"),
						},
						Default: stringdefault.StaticString("02:00"),
					},
					"interval_in_hours": schema.Int64Attribute{
						Optional:            true,
						Description:         "etcd backup interval, specified in Hours. intervalInMins and intervalInHours are mutually exclusive",
						MarkdownDescription: "etcd backup interval, specified in Hours. intervalInMins and intervalInHours are mutually exclusive",
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.UseStateForUnknown(),
						},
						Validators: []validator.Int64{
							int64validator.ConflictsWith(path.MatchRelative().AtName("interval_in_mins")),
							int64validator.AtLeast(1),
						},
					},
					"interval_in_mins": schema.Int64Attribute{
						Optional:            true,
						Description:         "etcd backup interval, specified in minutes. intervalInMins and intervalInHours are mutually exclusive",
						MarkdownDescription: "etcd backup interval, specified in minutes. intervalInMins and intervalInHours are mutually exclusive",
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.UseStateForUnknown(),
						},
						Validators: []validator.Int64{
							int64validator.AtLeast(1),
						},
					},
					"is_etcd_backup_enabled": schema.BoolAttribute{
						Required:            true,
						Description:         "Set to true if etcd backup should be enabled, false otherwise",
						MarkdownDescription: "Set to true if etcd backup should be enabled, false otherwise",
						PlanModifiers: []planmodifier.Bool{
							boolplanmodifier.UseStateForUnknown(),
						},
					},
					"max_interval_backup_count": schema.Int64Attribute{
						Optional:            true,
						Computed:            true,
						Description:         "max number of Backups retention for interval type backups, required if intervalInMins or intervalInHours is provided",
						MarkdownDescription: "max number of Backups retention for interval type backups, required if intervalInMins or intervalInHours is provided",
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.UseStateForUnknown(),
						},
						Validators: []validator.Int64{
							int64validator.AtLeast(1),
						},
					},
					"max_timestamp_backup_count": schema.Int64Attribute{
						Optional:            true,
						Computed:            true,
						Description:         "max number of Backups retention for Timestamp type backups, required if dailyBackupTime is provided",
						MarkdownDescription: "max number of Backups retention for Timestamp type backups, required if dailyBackupTime is provided",
						PlanModifiers: []planmodifier.Int64{
							int64planmodifier.UseStateForUnknown(),
						},
						Validators: []validator.Int64{
							int64validator.AtLeast(1),
						},
						Default: int64default.StaticInt64(3),
					},
					"storage_local_path": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Path on the local filesystem where the etcd backup should be stored. For 'local' storage type only.",
						MarkdownDescription: "Path on the local filesystem where the etcd backup should be stored. For 'local' storage type only.",
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
						},
						Default: stringdefault.StaticString("/etc/pf9/etcd-backup"),
					},
					"storage_type": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Storage type for the etcd backup. Only 'local' is current supported type. 'local' saves backup to the node's local disk",
						MarkdownDescription: "Storage type for the etcd backup. Only 'local' is current supported type. 'local' saves backup to the node's local disk",
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.UseStateForUnknown(),
						},
						Validators: []validator.String{
							stringvalidator.OneOf("local"),
						},
						Default: stringdefault.StaticString("local"),
					},
				},
				CustomType: EtcdBackupType{
					ObjectType: types.ObjectType{
						AttrTypes: EtcdBackupValue{}.AttributeTypes(ctx),
					},
				},
				Required: true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.UseStateForUnknown(),
				},
			},
			"etcd_data_dir": schema.StringAttribute{
				Computed: true,
			},
			"etcd_election_timeout_ms": schema.Int64Attribute{
				Computed: true,
			},
			"etcd_heartbeat_interval_ms": schema.Int64Attribute{
				Computed: true,
			},
			"etcd_version": schema.StringAttribute{
				Computed: true,
			},
			"external_dns_name": schema.StringAttribute{
				Optional:            true,
				Description:         "Optional DNS name for API endpoint. This field is autogenerated when usePf9Domain is set, also applicable for manual deploy",
				MarkdownDescription: "Optional DNS name for API endpoint. This field is autogenerated when usePf9Domain is set, also applicable for manual deploy",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"felix_ipv6_support": schema.BoolAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
				},
			},
			"flannel_iface_label": schema.StringAttribute{
				Optional: true,
			},
			"flannel_public_iface_label": schema.StringAttribute{
				Optional: true,
			},
			"gcr_private_registry": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "UUID of the cluster",
				MarkdownDescription: "UUID of the cluster",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"interface_detection_method": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Method to detect the interface",
				MarkdownDescription: "Method to detect the interface",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"interface_name": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Name of the interface",
				MarkdownDescription: "Name of the interface",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Default: stringdefault.StaticString(""),
			},
			"interface_reachable_ip": schema.StringAttribute{
				Computed: true,
			},
			"ipv6": schema.BoolAttribute{
				Computed: true,
			},
			"k8s_api_port": schema.StringAttribute{
				Computed: true,
			},
			"k8s_private_registry": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"kube_role_version": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "kube role version to be used when bringing up the cluster.",
				MarkdownDescription: "kube role version to be used when bringing up the cluster.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
					stringplanmodifier.RequiresReplace(),
				},
			},
			"last_ok": schema.StringAttribute{
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"last_op": schema.StringAttribute{
				Computed: true,
			},
			"master_ip": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "IP of master node",
				MarkdownDescription: "IP of master node",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"master_nodes": schema.SetAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "List of uuid of master nodes",
				MarkdownDescription: "List of uuid of master nodes",
			},
			"master_status": schema.StringAttribute{
				Computed: true,
			},
			"master_vip_iface": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If master_vip_ipv4 is specified, this field is required. Specify the interface that the VIP attaches to",
				MarkdownDescription: "If master_vip_ipv4 is specified, this field is required. Specify the interface that the VIP attaches to",
				Validators: []validator.String{
					stringvalidator.AlsoRequires(path.MatchRelative().AtName("master_vip_ipv4")),
				},
			},
			"master_vip_ipv4": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "API server Virtual IP that provides failover. When specified, deploy keepalived setup to cluster master nodes together",
				MarkdownDescription: "API server Virtual IP that provides failover. When specified, deploy keepalived setup to cluster master nodes together",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"master_vip_vrouter_id": schema.StringAttribute{
				Computed: true,
			},
			"masterless": schema.BoolAttribute{
				Computed: true,
			},
			"mtu_size": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "MTU for container network interfaces. Optional and used for the Calico network backend",
				MarkdownDescription: "MTU for container network interfaces. Optional and used for the Calico network backend",
				PlanModifiers: []planmodifier.Int64{
					int64planmodifier.UseStateForUnknown(),
				},
				Default: int64default.StaticInt64(1440),
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "Name of the cluster, applicable also for manual deploy",
				MarkdownDescription: "Name of the cluster, applicable also for manual deploy",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"network_plugin": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Network backend to use for container networking. Defaults to flannel. Supported choices are flannel, calico",
				MarkdownDescription: "Network backend to use for container networking. Defaults to flannel. Supported choices are flannel, calico",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("calico", "flannel"),
				},
				Default: stringdefault.StaticString("calico"),
			},
			"node_pool_name": schema.StringAttribute{
				Computed: true,
			},
			"node_pool_uuid": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Optional. UUID of the node pool used for the cluster. Defaults to the first node pool of the local cloud provider type",
				MarkdownDescription: "Optional. UUID of the node pool used for the cluster. Defaults to the first node pool of the local cloud provider type",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"privileged": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "True if cluster runs privileged containers",
				MarkdownDescription: "True if cluster runs privileged containers",
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
				},
				Default: booldefault.StaticBool(true),
			},
			"project_id": schema.StringAttribute{
				Computed: true,
			},
			"quay_private_registry": schema.StringAttribute{
				Optional: true,
				Computed: true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"runtime_config": schema.StringAttribute{
				Optional:            true,
				Description:         "Applicable also for manual deploy",
				MarkdownDescription: "Applicable also for manual deploy",
			},
			"services_cidr": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "CIDR used for service IP addresses, applicable also for manual deploy",
				MarkdownDescription: "CIDR used for service IP addresses, applicable also for manual deploy",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Default: stringdefault.StaticString("10.21.0.0/16"),
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"tags": schema.MapAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Description:         "User defined key-value pairs represented as a JSON object",
				MarkdownDescription: "User defined key-value pairs represented as a JSON object",
			},
			"task_error": schema.StringAttribute{
				Computed: true,
			},
			"task_status": schema.StringAttribute{
				Computed: true,
			},
			"topology_manager_policy": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "options: none, best-effort, restricted, single-numa-node; default: none",
				MarkdownDescription: "options: none, best-effort, restricted, single-numa-node; default: none",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
				Validators: []validator.String{
					stringvalidator.OneOf("none", "best-effort", "restricted", "single-numa-node"),
				},
				Default: stringdefault.StaticString("none"),
			},
			"use_hostname": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "If set to true nodes will be registered in the cluster using hostname instead of IP address. This option is only applicable to IPv4 hosts.",
				MarkdownDescription: "If set to true nodes will be registered in the cluster using hostname instead of IP address. This option is only applicable to IPv4 hosts.",
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.UseStateForUnknown(),
				},
				Default: booldefault.StaticBool(false),
			},
			"worker_nodes": schema.SetAttribute{
				ElementType:         types.StringType,
				Required:            true,
				Description:         "List of uuid of worker nodes",
				MarkdownDescription: "List of uuid of worker nodes",
			},
			"worker_status": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

type ClusterModel struct {
	AddonOperatorImageTag         types.String    `tfsdk:"addon_operator_image_tag"`
	Addons                        AddonsValue     `tfsdk:"addons"`
	AllowWorkloadsOnMaster        types.Bool      `tfsdk:"allow_workloads_on_master"`
	CalicoControllerCpuLimit      types.String    `tfsdk:"calico_controller_cpu_limit"`
	CalicoControllerMemoryLimit   types.String    `tfsdk:"calico_controller_memory_limit"`
	CalicoIpIpMode                types.String    `tfsdk:"calico_ip_ip_mode"`
	CalicoIpv4                    types.String    `tfsdk:"calico_ipv4"`
	CalicoIpv4DetectionMethod     types.String    `tfsdk:"calico_ipv4_detection_method"`
	CalicoIpv6                    types.String    `tfsdk:"calico_ipv6"`
	CalicoIpv6DetectionMethod     types.String    `tfsdk:"calico_ipv6_detection_method"`
	CalicoIpv6PoolBlockSize       types.String    `tfsdk:"calico_ipv6_pool_block_size"`
	CalicoIpv6PoolCidr            types.String    `tfsdk:"calico_ipv6_pool_cidr"`
	CalicoIpv6PoolNatOutgoing     types.Bool      `tfsdk:"calico_ipv6_pool_nat_outgoing"`
	CalicoNatOutgoing             types.Bool      `tfsdk:"calico_nat_outgoing"`
	CalicoNodeCpuLimit            types.String    `tfsdk:"calico_node_cpu_limit"`
	CalicoNodeMemoryLimit         types.String    `tfsdk:"calico_node_memory_limit"`
	CalicoRouterId                types.String    `tfsdk:"calico_router_id"`
	CalicoTyphaCpuLimit           types.String    `tfsdk:"calico_typha_cpu_limit"`
	CalicoTyphaMemoryLimit        types.String    `tfsdk:"calico_typha_memory_limit"`
	CalicoV4BlockSize             types.String    `tfsdk:"calico_v4_block_size"`
	CertExpiryHrs                 types.Int64     `tfsdk:"cert_expiry_hrs"`
	CloudProviderName             types.String    `tfsdk:"cloud_provider_name"`
	CloudProviderType             types.String    `tfsdk:"cloud_provider_type"`
	CloudProviderUuid             types.String    `tfsdk:"cloud_provider_uuid"`
	ContainerRuntime              types.String    `tfsdk:"container_runtime"`
	ContainersCidr                types.String    `tfsdk:"containers_cidr"`
	CpuManagerPolicy              types.String    `tfsdk:"cpu_manager_policy"`
	CreatedAt                     types.String    `tfsdk:"created_at"`
	CustomRegistryCertPath        types.String    `tfsdk:"custom_registry_cert_path"`
	CustomRegistryPassword        types.String    `tfsdk:"custom_registry_password"`
	CustomRegistryRepoPath        types.String    `tfsdk:"custom_registry_repo_path"`
	CustomRegistrySelfSignedCerts types.Bool      `tfsdk:"custom_registry_self_signed_certs"`
	CustomRegistrySkipTls         types.Bool      `tfsdk:"custom_registry_skip_tls"`
	CustomRegistryUrl             types.String    `tfsdk:"custom_registry_url"`
	CustomRegistryUsername        types.String    `tfsdk:"custom_registry_username"`
	DockerCentosPackageRepoUrl    types.String    `tfsdk:"docker_centos_package_repo_url"`
	DockerPrivateRegistry         types.String    `tfsdk:"docker_private_registry"`
	DockerRoot                    types.String    `tfsdk:"docker_root"`
	DockerUbuntuPackageRepoUrl    types.String    `tfsdk:"docker_ubuntu_package_repo_url"`
	EnableEtcdEncryption          types.Bool      `tfsdk:"enable_etcd_encryption"`
	EtcdBackup                    EtcdBackupValue `tfsdk:"etcd_backup"`
	EtcdDataDir                   types.String    `tfsdk:"etcd_data_dir"`
	EtcdElectionTimeoutMs         types.Int64     `tfsdk:"etcd_election_timeout_ms"`
	EtcdHeartbeatIntervalMs       types.Int64     `tfsdk:"etcd_heartbeat_interval_ms"`
	EtcdVersion                   types.String    `tfsdk:"etcd_version"`
	ExternalDnsName               types.String    `tfsdk:"external_dns_name"`
	FelixIpv6Support              types.Bool      `tfsdk:"felix_ipv6_support"`
	FlannelIfaceLabel             types.String    `tfsdk:"flannel_iface_label"`
	FlannelPublicIfaceLabel       types.String    `tfsdk:"flannel_public_iface_label"`
	GcrPrivateRegistry            types.String    `tfsdk:"gcr_private_registry"`
	Id                            types.String    `tfsdk:"id"`
	InterfaceDetectionMethod      types.String    `tfsdk:"interface_detection_method"`
	InterfaceName                 types.String    `tfsdk:"interface_name"`
	InterfaceReachableIp          types.String    `tfsdk:"interface_reachable_ip"`
	Ipv6                          types.Bool      `tfsdk:"ipv6"`
	K8sApiPort                    types.String    `tfsdk:"k8s_api_port"`
	K8sPrivateRegistry            types.String    `tfsdk:"k8s_private_registry"`
	KubeRoleVersion               types.String    `tfsdk:"kube_role_version"`
	LastOk                        types.String    `tfsdk:"last_ok"`
	LastOp                        types.String    `tfsdk:"last_op"`
	MasterIp                      types.String    `tfsdk:"master_ip"`
	MasterNodes                   types.Set       `tfsdk:"master_nodes"`
	MasterStatus                  types.String    `tfsdk:"master_status"`
	MasterVipIface                types.String    `tfsdk:"master_vip_iface"`
	MasterVipIpv4                 types.String    `tfsdk:"master_vip_ipv4"`
	MasterVipVrouterId            types.String    `tfsdk:"master_vip_vrouter_id"`
	Masterless                    types.Bool      `tfsdk:"masterless"`
	MtuSize                       types.Int64     `tfsdk:"mtu_size"`
	Name                          types.String    `tfsdk:"name"`
	NetworkPlugin                 types.String    `tfsdk:"network_plugin"`
	NodePoolName                  types.String    `tfsdk:"node_pool_name"`
	NodePoolUuid                  types.String    `tfsdk:"node_pool_uuid"`
	Privileged                    types.Bool      `tfsdk:"privileged"`
	ProjectId                     types.String    `tfsdk:"project_id"`
	QuayPrivateRegistry           types.String    `tfsdk:"quay_private_registry"`
	RuntimeConfig                 types.String    `tfsdk:"runtime_config"`
	ServicesCidr                  types.String    `tfsdk:"services_cidr"`
	Status                        types.String    `tfsdk:"status"`
	Tags                          types.Map       `tfsdk:"tags"`
	TaskError                     types.String    `tfsdk:"task_error"`
	TaskStatus                    types.String    `tfsdk:"task_status"`
	TopologyManagerPolicy         types.String    `tfsdk:"topology_manager_policy"`
	UseHostname                   types.Bool      `tfsdk:"use_hostname"`
	WorkerNodes                   types.Set       `tfsdk:"worker_nodes"`
	WorkerStatus                  types.String    `tfsdk:"worker_status"`
}

var _ basetypes.ObjectTypable = AddonsType{}

type AddonsType struct {
	basetypes.ObjectType
}

func (t AddonsType) Equal(o attr.Type) bool {
	other, ok := o.(AddonsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AddonsType) String() string {
	return "AddonsType"
}

func (t AddonsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	corednsAttribute, ok := attributes["coredns"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`coredns is missing from object`)

		return nil, diags
	}

	corednsVal, ok := corednsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`coredns expected to be basetypes.ObjectValue, was: %T`, corednsAttribute))
	}

	dashboardAttribute, ok := attributes["dashboard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dashboard is missing from object`)

		return nil, diags
	}

	dashboardVal, ok := dashboardAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dashboard expected to be basetypes.ObjectValue, was: %T`, dashboardAttribute))
	}

	dnsAutoscalerAttribute, ok := attributes["dns_autoscaler"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dns_autoscaler is missing from object`)

		return nil, diags
	}

	dnsAutoscalerVal, ok := dnsAutoscalerAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dns_autoscaler expected to be basetypes.ObjectValue, was: %T`, dnsAutoscalerAttribute))
	}

	kubevirtAttribute, ok := attributes["kubevirt"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kubevirt is missing from object`)

		return nil, diags
	}

	kubevirtVal, ok := kubevirtAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kubevirt expected to be basetypes.ObjectValue, was: %T`, kubevirtAttribute))
	}

	luigiAttribute, ok := attributes["luigi"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`luigi is missing from object`)

		return nil, diags
	}

	luigiVal, ok := luigiAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`luigi expected to be basetypes.ObjectValue, was: %T`, luigiAttribute))
	}

	metal3Attribute, ok := attributes["metal3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metal3 is missing from object`)

		return nil, diags
	}

	metal3Val, ok := metal3Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metal3 expected to be basetypes.ObjectValue, was: %T`, metal3Attribute))
	}

	metallbAttribute, ok := attributes["metallb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metallb is missing from object`)

		return nil, diags
	}

	metallbVal, ok := metallbAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metallb expected to be basetypes.ObjectValue, was: %T`, metallbAttribute))
	}

	metricsServerAttribute, ok := attributes["metrics_server"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metrics_server is missing from object`)

		return nil, diags
	}

	metricsServerVal, ok := metricsServerAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metrics_server expected to be basetypes.ObjectValue, was: %T`, metricsServerAttribute))
	}

	monitoringAttribute, ok := attributes["monitoring"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`monitoring is missing from object`)

		return nil, diags
	}

	monitoringVal, ok := monitoringAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`monitoring expected to be basetypes.ObjectValue, was: %T`, monitoringAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AddonsValue{
		Coredns:       corednsVal,
		Dashboard:     dashboardVal,
		DnsAutoscaler: dnsAutoscalerVal,
		Kubevirt:      kubevirtVal,
		Luigi:         luigiVal,
		Metal3:        metal3Val,
		Metallb:       metallbVal,
		MetricsServer: metricsServerVal,
		Monitoring:    monitoringVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewAddonsValueNull() AddonsValue {
	return AddonsValue{
		state: attr.ValueStateNull,
	}
}

func NewAddonsValueUnknown() AddonsValue {
	return AddonsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAddonsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AddonsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AddonsValue Attribute Value",
				"While creating a AddonsValue value, a missing attribute value was detected. "+
					"A AddonsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AddonsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AddonsValue Attribute Type",
				"While creating a AddonsValue value, an invalid attribute value was detected. "+
					"A AddonsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AddonsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AddonsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AddonsValue Attribute Value",
				"While creating a AddonsValue value, an extra attribute value was detected. "+
					"A AddonsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AddonsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAddonsValueUnknown(), diags
	}

	corednsAttribute, ok := attributes["coredns"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`coredns is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	corednsVal, ok := corednsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`coredns expected to be basetypes.ObjectValue, was: %T`, corednsAttribute))
	}

	dashboardAttribute, ok := attributes["dashboard"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dashboard is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	dashboardVal, ok := dashboardAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dashboard expected to be basetypes.ObjectValue, was: %T`, dashboardAttribute))
	}

	dnsAutoscalerAttribute, ok := attributes["dns_autoscaler"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dns_autoscaler is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	dnsAutoscalerVal, ok := dnsAutoscalerAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dns_autoscaler expected to be basetypes.ObjectValue, was: %T`, dnsAutoscalerAttribute))
	}

	kubevirtAttribute, ok := attributes["kubevirt"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`kubevirt is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	kubevirtVal, ok := kubevirtAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`kubevirt expected to be basetypes.ObjectValue, was: %T`, kubevirtAttribute))
	}

	luigiAttribute, ok := attributes["luigi"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`luigi is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	luigiVal, ok := luigiAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`luigi expected to be basetypes.ObjectValue, was: %T`, luigiAttribute))
	}

	metal3Attribute, ok := attributes["metal3"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metal3 is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	metal3Val, ok := metal3Attribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metal3 expected to be basetypes.ObjectValue, was: %T`, metal3Attribute))
	}

	metallbAttribute, ok := attributes["metallb"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metallb is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	metallbVal, ok := metallbAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metallb expected to be basetypes.ObjectValue, was: %T`, metallbAttribute))
	}

	metricsServerAttribute, ok := attributes["metrics_server"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`metrics_server is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	metricsServerVal, ok := metricsServerAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`metrics_server expected to be basetypes.ObjectValue, was: %T`, metricsServerAttribute))
	}

	monitoringAttribute, ok := attributes["monitoring"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`monitoring is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	monitoringVal, ok := monitoringAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`monitoring expected to be basetypes.ObjectValue, was: %T`, monitoringAttribute))
	}

	if diags.HasError() {
		return NewAddonsValueUnknown(), diags
	}

	return AddonsValue{
		Coredns:       corednsVal,
		Dashboard:     dashboardVal,
		DnsAutoscaler: dnsAutoscalerVal,
		Kubevirt:      kubevirtVal,
		Luigi:         luigiVal,
		Metal3:        metal3Val,
		Metallb:       metallbVal,
		MetricsServer: metricsServerVal,
		Monitoring:    monitoringVal,
		state:         attr.ValueStateKnown,
	}, diags
}

func NewAddonsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AddonsValue {
	object, diags := NewAddonsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAddonsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AddonsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAddonsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAddonsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAddonsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAddonsValueMust(AddonsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AddonsType) ValueType(ctx context.Context) attr.Value {
	return AddonsValue{}
}

var _ basetypes.ObjectValuable = AddonsValue{}

type AddonsValue struct {
	Coredns       basetypes.ObjectValue `tfsdk:"coredns"`
	Dashboard     basetypes.ObjectValue `tfsdk:"dashboard"`
	DnsAutoscaler basetypes.ObjectValue `tfsdk:"dns_autoscaler"`
	Kubevirt      basetypes.ObjectValue `tfsdk:"kubevirt"`
	Luigi         basetypes.ObjectValue `tfsdk:"luigi"`
	Metal3        basetypes.ObjectValue `tfsdk:"metal3"`
	Metallb       basetypes.ObjectValue `tfsdk:"metallb"`
	MetricsServer basetypes.ObjectValue `tfsdk:"metrics_server"`
	Monitoring    basetypes.ObjectValue `tfsdk:"monitoring"`
	state         attr.ValueState
}

func (v AddonsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["coredns"] = basetypes.ObjectType{
		AttrTypes: CorednsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["dashboard"] = basetypes.ObjectType{
		AttrTypes: DashboardValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["dns_autoscaler"] = basetypes.ObjectType{
		AttrTypes: DnsAutoscalerValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["kubevirt"] = basetypes.ObjectType{
		AttrTypes: KubevirtValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["luigi"] = basetypes.ObjectType{
		AttrTypes: LuigiValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["metal3"] = basetypes.ObjectType{
		AttrTypes: Metal3Value{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["metallb"] = basetypes.ObjectType{
		AttrTypes: MetallbValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["metrics_server"] = basetypes.ObjectType{
		AttrTypes: MetricsServerValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["monitoring"] = basetypes.ObjectType{
		AttrTypes: MonitoringValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.Coredns.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["coredns"] = val

		val, err = v.Dashboard.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dashboard"] = val

		val, err = v.DnsAutoscaler.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dns_autoscaler"] = val

		val, err = v.Kubevirt.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["kubevirt"] = val

		val, err = v.Luigi.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["luigi"] = val

		val, err = v.Metal3.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["metal3"] = val

		val, err = v.Metallb.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["metallb"] = val

		val, err = v.MetricsServer.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["metrics_server"] = val

		val, err = v.Monitoring.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["monitoring"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AddonsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AddonsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AddonsValue) String() string {
	return "AddonsValue"
}

func (v AddonsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var coredns basetypes.ObjectValue

	if v.Coredns.IsNull() {
		coredns = types.ObjectNull(
			CorednsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Coredns.IsUnknown() {
		coredns = types.ObjectUnknown(
			CorednsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Coredns.IsNull() && !v.Coredns.IsUnknown() {
		coredns = types.ObjectValueMust(
			CorednsValue{}.AttributeTypes(ctx),
			v.Coredns.Attributes(),
		)
	}

	var dashboard basetypes.ObjectValue

	if v.Dashboard.IsNull() {
		dashboard = types.ObjectNull(
			DashboardValue{}.AttributeTypes(ctx),
		)
	}

	if v.Dashboard.IsUnknown() {
		dashboard = types.ObjectUnknown(
			DashboardValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Dashboard.IsNull() && !v.Dashboard.IsUnknown() {
		dashboard = types.ObjectValueMust(
			DashboardValue{}.AttributeTypes(ctx),
			v.Dashboard.Attributes(),
		)
	}

	var dnsAutoscaler basetypes.ObjectValue

	if v.DnsAutoscaler.IsNull() {
		dnsAutoscaler = types.ObjectNull(
			DnsAutoscalerValue{}.AttributeTypes(ctx),
		)
	}

	if v.DnsAutoscaler.IsUnknown() {
		dnsAutoscaler = types.ObjectUnknown(
			DnsAutoscalerValue{}.AttributeTypes(ctx),
		)
	}

	if !v.DnsAutoscaler.IsNull() && !v.DnsAutoscaler.IsUnknown() {
		dnsAutoscaler = types.ObjectValueMust(
			DnsAutoscalerValue{}.AttributeTypes(ctx),
			v.DnsAutoscaler.Attributes(),
		)
	}

	var kubevirt basetypes.ObjectValue

	if v.Kubevirt.IsNull() {
		kubevirt = types.ObjectNull(
			KubevirtValue{}.AttributeTypes(ctx),
		)
	}

	if v.Kubevirt.IsUnknown() {
		kubevirt = types.ObjectUnknown(
			KubevirtValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Kubevirt.IsNull() && !v.Kubevirt.IsUnknown() {
		kubevirt = types.ObjectValueMust(
			KubevirtValue{}.AttributeTypes(ctx),
			v.Kubevirt.Attributes(),
		)
	}

	var luigi basetypes.ObjectValue

	if v.Luigi.IsNull() {
		luigi = types.ObjectNull(
			LuigiValue{}.AttributeTypes(ctx),
		)
	}

	if v.Luigi.IsUnknown() {
		luigi = types.ObjectUnknown(
			LuigiValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Luigi.IsNull() && !v.Luigi.IsUnknown() {
		luigi = types.ObjectValueMust(
			LuigiValue{}.AttributeTypes(ctx),
			v.Luigi.Attributes(),
		)
	}

	var metal3 basetypes.ObjectValue

	if v.Metal3.IsNull() {
		metal3 = types.ObjectNull(
			Metal3Value{}.AttributeTypes(ctx),
		)
	}

	if v.Metal3.IsUnknown() {
		metal3 = types.ObjectUnknown(
			Metal3Value{}.AttributeTypes(ctx),
		)
	}

	if !v.Metal3.IsNull() && !v.Metal3.IsUnknown() {
		metal3 = types.ObjectValueMust(
			Metal3Value{}.AttributeTypes(ctx),
			v.Metal3.Attributes(),
		)
	}

	var metallb basetypes.ObjectValue

	if v.Metallb.IsNull() {
		metallb = types.ObjectNull(
			MetallbValue{}.AttributeTypes(ctx),
		)
	}

	if v.Metallb.IsUnknown() {
		metallb = types.ObjectUnknown(
			MetallbValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Metallb.IsNull() && !v.Metallb.IsUnknown() {
		metallb = types.ObjectValueMust(
			MetallbValue{}.AttributeTypes(ctx),
			v.Metallb.Attributes(),
		)
	}

	var metricsServer basetypes.ObjectValue

	if v.MetricsServer.IsNull() {
		metricsServer = types.ObjectNull(
			MetricsServerValue{}.AttributeTypes(ctx),
		)
	}

	if v.MetricsServer.IsUnknown() {
		metricsServer = types.ObjectUnknown(
			MetricsServerValue{}.AttributeTypes(ctx),
		)
	}

	if !v.MetricsServer.IsNull() && !v.MetricsServer.IsUnknown() {
		metricsServer = types.ObjectValueMust(
			MetricsServerValue{}.AttributeTypes(ctx),
			v.MetricsServer.Attributes(),
		)
	}

	var monitoring basetypes.ObjectValue

	if v.Monitoring.IsNull() {
		monitoring = types.ObjectNull(
			MonitoringValue{}.AttributeTypes(ctx),
		)
	}

	if v.Monitoring.IsUnknown() {
		monitoring = types.ObjectUnknown(
			MonitoringValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Monitoring.IsNull() && !v.Monitoring.IsUnknown() {
		monitoring = types.ObjectValueMust(
			MonitoringValue{}.AttributeTypes(ctx),
			v.Monitoring.Attributes(),
		)
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"coredns": basetypes.ObjectType{
				AttrTypes: CorednsValue{}.AttributeTypes(ctx),
			},
			"dashboard": basetypes.ObjectType{
				AttrTypes: DashboardValue{}.AttributeTypes(ctx),
			},
			"dns_autoscaler": basetypes.ObjectType{
				AttrTypes: DnsAutoscalerValue{}.AttributeTypes(ctx),
			},
			"kubevirt": basetypes.ObjectType{
				AttrTypes: KubevirtValue{}.AttributeTypes(ctx),
			},
			"luigi": basetypes.ObjectType{
				AttrTypes: LuigiValue{}.AttributeTypes(ctx),
			},
			"metal3": basetypes.ObjectType{
				AttrTypes: Metal3Value{}.AttributeTypes(ctx),
			},
			"metallb": basetypes.ObjectType{
				AttrTypes: MetallbValue{}.AttributeTypes(ctx),
			},
			"metrics_server": basetypes.ObjectType{
				AttrTypes: MetricsServerValue{}.AttributeTypes(ctx),
			},
			"monitoring": basetypes.ObjectType{
				AttrTypes: MonitoringValue{}.AttributeTypes(ctx),
			},
		},
		map[string]attr.Value{
			"coredns":        coredns,
			"dashboard":      dashboard,
			"dns_autoscaler": dnsAutoscaler,
			"kubevirt":       kubevirt,
			"luigi":          luigi,
			"metal3":         metal3,
			"metallb":        metallb,
			"metrics_server": metricsServer,
			"monitoring":     monitoring,
		})

	return objVal, diags
}

func (v AddonsValue) Equal(o attr.Value) bool {
	other, ok := o.(AddonsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Coredns.Equal(other.Coredns) {
		return false
	}

	if !v.Dashboard.Equal(other.Dashboard) {
		return false
	}

	if !v.DnsAutoscaler.Equal(other.DnsAutoscaler) {
		return false
	}

	if !v.Kubevirt.Equal(other.Kubevirt) {
		return false
	}

	if !v.Luigi.Equal(other.Luigi) {
		return false
	}

	if !v.Metal3.Equal(other.Metal3) {
		return false
	}

	if !v.Metallb.Equal(other.Metallb) {
		return false
	}

	if !v.MetricsServer.Equal(other.MetricsServer) {
		return false
	}

	if !v.Monitoring.Equal(other.Monitoring) {
		return false
	}

	return true
}

func (v AddonsValue) Type(ctx context.Context) attr.Type {
	return AddonsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AddonsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"coredns": basetypes.ObjectType{
			AttrTypes: CorednsValue{}.AttributeTypes(ctx),
		},
		"dashboard": basetypes.ObjectType{
			AttrTypes: DashboardValue{}.AttributeTypes(ctx),
		},
		"dns_autoscaler": basetypes.ObjectType{
			AttrTypes: DnsAutoscalerValue{}.AttributeTypes(ctx),
		},
		"kubevirt": basetypes.ObjectType{
			AttrTypes: KubevirtValue{}.AttributeTypes(ctx),
		},
		"luigi": basetypes.ObjectType{
			AttrTypes: LuigiValue{}.AttributeTypes(ctx),
		},
		"metal3": basetypes.ObjectType{
			AttrTypes: Metal3Value{}.AttributeTypes(ctx),
		},
		"metallb": basetypes.ObjectType{
			AttrTypes: MetallbValue{}.AttributeTypes(ctx),
		},
		"metrics_server": basetypes.ObjectType{
			AttrTypes: MetricsServerValue{}.AttributeTypes(ctx),
		},
		"monitoring": basetypes.ObjectType{
			AttrTypes: MonitoringValue{}.AttributeTypes(ctx),
		},
	}
}

var _ basetypes.ObjectTypable = CorednsType{}

type CorednsType struct {
	basetypes.ObjectType
}

func (t CorednsType) Equal(o attr.Type) bool {
	other, ok := o.(CorednsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CorednsType) String() string {
	return "CorednsType"
}

func (t CorednsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return nil, diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return nil, diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return nil, diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CorednsValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewCorednsValueNull() CorednsValue {
	return CorednsValue{
		state: attr.ValueStateNull,
	}
}

func NewCorednsValueUnknown() CorednsValue {
	return CorednsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCorednsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CorednsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CorednsValue Attribute Value",
				"While creating a CorednsValue value, a missing attribute value was detected. "+
					"A CorednsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CorednsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CorednsValue Attribute Type",
				"While creating a CorednsValue value, an invalid attribute value was detected. "+
					"A CorednsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CorednsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CorednsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CorednsValue Attribute Value",
				"While creating a CorednsValue value, an extra attribute value was detected. "+
					"A CorednsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CorednsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCorednsValueUnknown(), diags
	}

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return NewCorednsValueUnknown(), diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return NewCorednsValueUnknown(), diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return NewCorednsValueUnknown(), diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewCorednsValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewCorednsValueUnknown(), diags
	}

	return CorednsValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewCorednsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CorednsValue {
	object, diags := NewCorednsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCorednsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CorednsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCorednsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCorednsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCorednsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCorednsValueMust(CorednsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CorednsType) ValueType(ctx context.Context) attr.Value {
	return CorednsValue{}
}

var _ basetypes.ObjectValuable = CorednsValue{}

type CorednsValue struct {
	IsEnabled basetypes.BoolValue   `tfsdk:"is_enabled"`
	Params    basetypes.MapValue    `tfsdk:"params"`
	Phase     basetypes.StringValue `tfsdk:"phase"`
	Version   basetypes.StringValue `tfsdk:"version"`
	state     attr.ValueState
}

func (v CorednsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["is_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["params"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["phase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IsEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_enabled"] = val

		val, err = v.Params.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["params"] = val

		val, err = v.Phase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["phase"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CorednsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CorednsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CorednsValue) String() string {
	return "CorednsValue"
}

func (v CorednsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	paramsVal, d := types.MapValue(types.StringType, v.Params.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		},
		map[string]attr.Value{
			"is_enabled": v.IsEnabled,
			"params":     paramsVal,
			"phase":      v.Phase,
			"version":    v.Version,
		})

	return objVal, diags
}

func (v CorednsValue) Equal(o attr.Value) bool {
	other, ok := o.(CorednsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsEnabled.Equal(other.IsEnabled) {
		return false
	}

	if !v.Params.Equal(other.Params) {
		return false
	}

	if !v.Phase.Equal(other.Phase) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v CorednsValue) Type(ctx context.Context) attr.Type {
	return CorednsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CorednsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_enabled": basetypes.BoolType{},
		"params": basetypes.MapType{
			ElemType: types.StringType,
		},
		"phase":   basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = DashboardType{}

type DashboardType struct {
	basetypes.ObjectType
}

func (t DashboardType) Equal(o attr.Type) bool {
	other, ok := o.(DashboardType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DashboardType) String() string {
	return "DashboardType"
}

func (t DashboardType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return nil, diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return nil, diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return nil, diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DashboardValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewDashboardValueNull() DashboardValue {
	return DashboardValue{
		state: attr.ValueStateNull,
	}
}

func NewDashboardValueUnknown() DashboardValue {
	return DashboardValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDashboardValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DashboardValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DashboardValue Attribute Value",
				"While creating a DashboardValue value, a missing attribute value was detected. "+
					"A DashboardValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DashboardValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DashboardValue Attribute Type",
				"While creating a DashboardValue value, an invalid attribute value was detected. "+
					"A DashboardValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DashboardValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DashboardValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DashboardValue Attribute Value",
				"While creating a DashboardValue value, an extra attribute value was detected. "+
					"A DashboardValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DashboardValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDashboardValueUnknown(), diags
	}

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return NewDashboardValueUnknown(), diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return NewDashboardValueUnknown(), diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return NewDashboardValueUnknown(), diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewDashboardValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewDashboardValueUnknown(), diags
	}

	return DashboardValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewDashboardValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DashboardValue {
	object, diags := NewDashboardValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDashboardValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DashboardType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDashboardValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDashboardValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDashboardValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDashboardValueMust(DashboardValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DashboardType) ValueType(ctx context.Context) attr.Value {
	return DashboardValue{}
}

var _ basetypes.ObjectValuable = DashboardValue{}

type DashboardValue struct {
	IsEnabled basetypes.BoolValue   `tfsdk:"is_enabled"`
	Params    basetypes.MapValue    `tfsdk:"params"`
	Phase     basetypes.StringValue `tfsdk:"phase"`
	Version   basetypes.StringValue `tfsdk:"version"`
	state     attr.ValueState
}

func (v DashboardValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["is_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["params"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["phase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IsEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_enabled"] = val

		val, err = v.Params.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["params"] = val

		val, err = v.Phase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["phase"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DashboardValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DashboardValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DashboardValue) String() string {
	return "DashboardValue"
}

func (v DashboardValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	paramsVal, d := types.MapValue(types.StringType, v.Params.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		},
		map[string]attr.Value{
			"is_enabled": v.IsEnabled,
			"params":     paramsVal,
			"phase":      v.Phase,
			"version":    v.Version,
		})

	return objVal, diags
}

func (v DashboardValue) Equal(o attr.Value) bool {
	other, ok := o.(DashboardValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsEnabled.Equal(other.IsEnabled) {
		return false
	}

	if !v.Params.Equal(other.Params) {
		return false
	}

	if !v.Phase.Equal(other.Phase) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v DashboardValue) Type(ctx context.Context) attr.Type {
	return DashboardType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DashboardValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_enabled": basetypes.BoolType{},
		"params": basetypes.MapType{
			ElemType: types.StringType,
		},
		"phase":   basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = DnsAutoscalerType{}

type DnsAutoscalerType struct {
	basetypes.ObjectType
}

func (t DnsAutoscalerType) Equal(o attr.Type) bool {
	other, ok := o.(DnsAutoscalerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DnsAutoscalerType) String() string {
	return "DnsAutoscalerType"
}

func (t DnsAutoscalerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return nil, diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return nil, diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return nil, diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DnsAutoscalerValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewDnsAutoscalerValueNull() DnsAutoscalerValue {
	return DnsAutoscalerValue{
		state: attr.ValueStateNull,
	}
}

func NewDnsAutoscalerValueUnknown() DnsAutoscalerValue {
	return DnsAutoscalerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDnsAutoscalerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DnsAutoscalerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DnsAutoscalerValue Attribute Value",
				"While creating a DnsAutoscalerValue value, a missing attribute value was detected. "+
					"A DnsAutoscalerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DnsAutoscalerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DnsAutoscalerValue Attribute Type",
				"While creating a DnsAutoscalerValue value, an invalid attribute value was detected. "+
					"A DnsAutoscalerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DnsAutoscalerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DnsAutoscalerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DnsAutoscalerValue Attribute Value",
				"While creating a DnsAutoscalerValue value, an extra attribute value was detected. "+
					"A DnsAutoscalerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DnsAutoscalerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDnsAutoscalerValueUnknown(), diags
	}

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return NewDnsAutoscalerValueUnknown(), diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return NewDnsAutoscalerValueUnknown(), diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return NewDnsAutoscalerValueUnknown(), diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewDnsAutoscalerValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewDnsAutoscalerValueUnknown(), diags
	}

	return DnsAutoscalerValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewDnsAutoscalerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DnsAutoscalerValue {
	object, diags := NewDnsAutoscalerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDnsAutoscalerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DnsAutoscalerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDnsAutoscalerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDnsAutoscalerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDnsAutoscalerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDnsAutoscalerValueMust(DnsAutoscalerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DnsAutoscalerType) ValueType(ctx context.Context) attr.Value {
	return DnsAutoscalerValue{}
}

var _ basetypes.ObjectValuable = DnsAutoscalerValue{}

type DnsAutoscalerValue struct {
	IsEnabled basetypes.BoolValue   `tfsdk:"is_enabled"`
	Params    basetypes.MapValue    `tfsdk:"params"`
	Phase     basetypes.StringValue `tfsdk:"phase"`
	Version   basetypes.StringValue `tfsdk:"version"`
	state     attr.ValueState
}

func (v DnsAutoscalerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["is_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["params"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["phase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IsEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_enabled"] = val

		val, err = v.Params.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["params"] = val

		val, err = v.Phase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["phase"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DnsAutoscalerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DnsAutoscalerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DnsAutoscalerValue) String() string {
	return "DnsAutoscalerValue"
}

func (v DnsAutoscalerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	paramsVal, d := types.MapValue(types.StringType, v.Params.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		},
		map[string]attr.Value{
			"is_enabled": v.IsEnabled,
			"params":     paramsVal,
			"phase":      v.Phase,
			"version":    v.Version,
		})

	return objVal, diags
}

func (v DnsAutoscalerValue) Equal(o attr.Value) bool {
	other, ok := o.(DnsAutoscalerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsEnabled.Equal(other.IsEnabled) {
		return false
	}

	if !v.Params.Equal(other.Params) {
		return false
	}

	if !v.Phase.Equal(other.Phase) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v DnsAutoscalerValue) Type(ctx context.Context) attr.Type {
	return DnsAutoscalerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DnsAutoscalerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_enabled": basetypes.BoolType{},
		"params": basetypes.MapType{
			ElemType: types.StringType,
		},
		"phase":   basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = KubevirtType{}

type KubevirtType struct {
	basetypes.ObjectType
}

func (t KubevirtType) Equal(o attr.Type) bool {
	other, ok := o.(KubevirtType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t KubevirtType) String() string {
	return "KubevirtType"
}

func (t KubevirtType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return nil, diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return nil, diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return nil, diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return KubevirtValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewKubevirtValueNull() KubevirtValue {
	return KubevirtValue{
		state: attr.ValueStateNull,
	}
}

func NewKubevirtValueUnknown() KubevirtValue {
	return KubevirtValue{
		state: attr.ValueStateUnknown,
	}
}

func NewKubevirtValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (KubevirtValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing KubevirtValue Attribute Value",
				"While creating a KubevirtValue value, a missing attribute value was detected. "+
					"A KubevirtValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("KubevirtValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid KubevirtValue Attribute Type",
				"While creating a KubevirtValue value, an invalid attribute value was detected. "+
					"A KubevirtValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("KubevirtValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("KubevirtValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra KubevirtValue Attribute Value",
				"While creating a KubevirtValue value, an extra attribute value was detected. "+
					"A KubevirtValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra KubevirtValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewKubevirtValueUnknown(), diags
	}

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return NewKubevirtValueUnknown(), diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return NewKubevirtValueUnknown(), diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return NewKubevirtValueUnknown(), diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewKubevirtValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewKubevirtValueUnknown(), diags
	}

	return KubevirtValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewKubevirtValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) KubevirtValue {
	object, diags := NewKubevirtValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewKubevirtValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t KubevirtType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewKubevirtValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewKubevirtValueUnknown(), nil
	}

	if in.IsNull() {
		return NewKubevirtValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewKubevirtValueMust(KubevirtValue{}.AttributeTypes(ctx), attributes), nil
}

func (t KubevirtType) ValueType(ctx context.Context) attr.Value {
	return KubevirtValue{}
}

var _ basetypes.ObjectValuable = KubevirtValue{}

type KubevirtValue struct {
	IsEnabled basetypes.BoolValue   `tfsdk:"is_enabled"`
	Params    basetypes.MapValue    `tfsdk:"params"`
	Phase     basetypes.StringValue `tfsdk:"phase"`
	Version   basetypes.StringValue `tfsdk:"version"`
	state     attr.ValueState
}

func (v KubevirtValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["is_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["params"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["phase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IsEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_enabled"] = val

		val, err = v.Params.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["params"] = val

		val, err = v.Phase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["phase"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v KubevirtValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v KubevirtValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v KubevirtValue) String() string {
	return "KubevirtValue"
}

func (v KubevirtValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	paramsVal, d := types.MapValue(types.StringType, v.Params.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		},
		map[string]attr.Value{
			"is_enabled": v.IsEnabled,
			"params":     paramsVal,
			"phase":      v.Phase,
			"version":    v.Version,
		})

	return objVal, diags
}

func (v KubevirtValue) Equal(o attr.Value) bool {
	other, ok := o.(KubevirtValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsEnabled.Equal(other.IsEnabled) {
		return false
	}

	if !v.Params.Equal(other.Params) {
		return false
	}

	if !v.Phase.Equal(other.Phase) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v KubevirtValue) Type(ctx context.Context) attr.Type {
	return KubevirtType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v KubevirtValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_enabled": basetypes.BoolType{},
		"params": basetypes.MapType{
			ElemType: types.StringType,
		},
		"phase":   basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LuigiType{}

type LuigiType struct {
	basetypes.ObjectType
}

func (t LuigiType) Equal(o attr.Type) bool {
	other, ok := o.(LuigiType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LuigiType) String() string {
	return "LuigiType"
}

func (t LuigiType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return nil, diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return nil, diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return nil, diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LuigiValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewLuigiValueNull() LuigiValue {
	return LuigiValue{
		state: attr.ValueStateNull,
	}
}

func NewLuigiValueUnknown() LuigiValue {
	return LuigiValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLuigiValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LuigiValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LuigiValue Attribute Value",
				"While creating a LuigiValue value, a missing attribute value was detected. "+
					"A LuigiValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LuigiValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LuigiValue Attribute Type",
				"While creating a LuigiValue value, an invalid attribute value was detected. "+
					"A LuigiValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LuigiValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LuigiValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LuigiValue Attribute Value",
				"While creating a LuigiValue value, an extra attribute value was detected. "+
					"A LuigiValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LuigiValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLuigiValueUnknown(), diags
	}

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return NewLuigiValueUnknown(), diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return NewLuigiValueUnknown(), diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return NewLuigiValueUnknown(), diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewLuigiValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewLuigiValueUnknown(), diags
	}

	return LuigiValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewLuigiValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LuigiValue {
	object, diags := NewLuigiValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLuigiValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LuigiType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLuigiValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLuigiValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLuigiValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLuigiValueMust(LuigiValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LuigiType) ValueType(ctx context.Context) attr.Value {
	return LuigiValue{}
}

var _ basetypes.ObjectValuable = LuigiValue{}

type LuigiValue struct {
	IsEnabled basetypes.BoolValue   `tfsdk:"is_enabled"`
	Params    basetypes.MapValue    `tfsdk:"params"`
	Phase     basetypes.StringValue `tfsdk:"phase"`
	Version   basetypes.StringValue `tfsdk:"version"`
	state     attr.ValueState
}

func (v LuigiValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["is_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["params"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["phase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IsEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_enabled"] = val

		val, err = v.Params.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["params"] = val

		val, err = v.Phase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["phase"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LuigiValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LuigiValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LuigiValue) String() string {
	return "LuigiValue"
}

func (v LuigiValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	paramsVal, d := types.MapValue(types.StringType, v.Params.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		},
		map[string]attr.Value{
			"is_enabled": v.IsEnabled,
			"params":     paramsVal,
			"phase":      v.Phase,
			"version":    v.Version,
		})

	return objVal, diags
}

func (v LuigiValue) Equal(o attr.Value) bool {
	other, ok := o.(LuigiValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsEnabled.Equal(other.IsEnabled) {
		return false
	}

	if !v.Params.Equal(other.Params) {
		return false
	}

	if !v.Phase.Equal(other.Phase) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v LuigiValue) Type(ctx context.Context) attr.Type {
	return LuigiType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LuigiValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_enabled": basetypes.BoolType{},
		"params": basetypes.MapType{
			ElemType: types.StringType,
		},
		"phase":   basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = Metal3Type{}

type Metal3Type struct {
	basetypes.ObjectType
}

func (t Metal3Type) Equal(o attr.Type) bool {
	other, ok := o.(Metal3Type)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t Metal3Type) String() string {
	return "Metal3Type"
}

func (t Metal3Type) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return nil, diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return nil, diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return nil, diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return Metal3Value{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewMetal3ValueNull() Metal3Value {
	return Metal3Value{
		state: attr.ValueStateNull,
	}
}

func NewMetal3ValueUnknown() Metal3Value {
	return Metal3Value{
		state: attr.ValueStateUnknown,
	}
}

func NewMetal3Value(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (Metal3Value, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing Metal3Value Attribute Value",
				"While creating a Metal3Value value, a missing attribute value was detected. "+
					"A Metal3Value must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Metal3Value Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid Metal3Value Attribute Type",
				"While creating a Metal3Value value, an invalid attribute value was detected. "+
					"A Metal3Value must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Metal3Value Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("Metal3Value Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra Metal3Value Attribute Value",
				"While creating a Metal3Value value, an extra attribute value was detected. "+
					"A Metal3Value must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra Metal3Value Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetal3ValueUnknown(), diags
	}

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return NewMetal3ValueUnknown(), diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return NewMetal3ValueUnknown(), diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return NewMetal3ValueUnknown(), diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewMetal3ValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewMetal3ValueUnknown(), diags
	}

	return Metal3Value{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewMetal3ValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) Metal3Value {
	object, diags := NewMetal3Value(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetal3ValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t Metal3Type) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetal3ValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetal3ValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetal3ValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetal3ValueMust(Metal3Value{}.AttributeTypes(ctx), attributes), nil
}

func (t Metal3Type) ValueType(ctx context.Context) attr.Value {
	return Metal3Value{}
}

var _ basetypes.ObjectValuable = Metal3Value{}

type Metal3Value struct {
	IsEnabled basetypes.BoolValue   `tfsdk:"is_enabled"`
	Params    basetypes.MapValue    `tfsdk:"params"`
	Phase     basetypes.StringValue `tfsdk:"phase"`
	Version   basetypes.StringValue `tfsdk:"version"`
	state     attr.ValueState
}

func (v Metal3Value) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["is_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["params"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["phase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IsEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_enabled"] = val

		val, err = v.Params.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["params"] = val

		val, err = v.Phase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["phase"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v Metal3Value) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v Metal3Value) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v Metal3Value) String() string {
	return "Metal3Value"
}

func (v Metal3Value) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	paramsVal, d := types.MapValue(types.StringType, v.Params.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		},
		map[string]attr.Value{
			"is_enabled": v.IsEnabled,
			"params":     paramsVal,
			"phase":      v.Phase,
			"version":    v.Version,
		})

	return objVal, diags
}

func (v Metal3Value) Equal(o attr.Value) bool {
	other, ok := o.(Metal3Value)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsEnabled.Equal(other.IsEnabled) {
		return false
	}

	if !v.Params.Equal(other.Params) {
		return false
	}

	if !v.Phase.Equal(other.Phase) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v Metal3Value) Type(ctx context.Context) attr.Type {
	return Metal3Type{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v Metal3Value) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_enabled": basetypes.BoolType{},
		"params": basetypes.MapType{
			ElemType: types.StringType,
		},
		"phase":   basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MetallbType{}

type MetallbType struct {
	basetypes.ObjectType
}

func (t MetallbType) Equal(o attr.Type) bool {
	other, ok := o.(MetallbType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetallbType) String() string {
	return "MetallbType"
}

func (t MetallbType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return nil, diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return nil, diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return nil, diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetallbValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewMetallbValueNull() MetallbValue {
	return MetallbValue{
		state: attr.ValueStateNull,
	}
}

func NewMetallbValueUnknown() MetallbValue {
	return MetallbValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetallbValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetallbValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetallbValue Attribute Value",
				"While creating a MetallbValue value, a missing attribute value was detected. "+
					"A MetallbValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetallbValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetallbValue Attribute Type",
				"While creating a MetallbValue value, an invalid attribute value was detected. "+
					"A MetallbValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetallbValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetallbValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetallbValue Attribute Value",
				"While creating a MetallbValue value, an extra attribute value was detected. "+
					"A MetallbValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetallbValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetallbValueUnknown(), diags
	}

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return NewMetallbValueUnknown(), diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return NewMetallbValueUnknown(), diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return NewMetallbValueUnknown(), diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewMetallbValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewMetallbValueUnknown(), diags
	}

	return MetallbValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewMetallbValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetallbValue {
	object, diags := NewMetallbValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetallbValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetallbType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetallbValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetallbValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetallbValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetallbValueMust(MetallbValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetallbType) ValueType(ctx context.Context) attr.Value {
	return MetallbValue{}
}

var _ basetypes.ObjectValuable = MetallbValue{}

type MetallbValue struct {
	IsEnabled basetypes.BoolValue   `tfsdk:"is_enabled"`
	Params    basetypes.MapValue    `tfsdk:"params"`
	Phase     basetypes.StringValue `tfsdk:"phase"`
	Version   basetypes.StringValue `tfsdk:"version"`
	state     attr.ValueState
}

func (v MetallbValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["is_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["params"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["phase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IsEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_enabled"] = val

		val, err = v.Params.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["params"] = val

		val, err = v.Phase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["phase"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetallbValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetallbValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetallbValue) String() string {
	return "MetallbValue"
}

func (v MetallbValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	paramsVal, d := types.MapValue(types.StringType, v.Params.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		},
		map[string]attr.Value{
			"is_enabled": v.IsEnabled,
			"params":     paramsVal,
			"phase":      v.Phase,
			"version":    v.Version,
		})

	return objVal, diags
}

func (v MetallbValue) Equal(o attr.Value) bool {
	other, ok := o.(MetallbValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsEnabled.Equal(other.IsEnabled) {
		return false
	}

	if !v.Params.Equal(other.Params) {
		return false
	}

	if !v.Phase.Equal(other.Phase) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v MetallbValue) Type(ctx context.Context) attr.Type {
	return MetallbType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetallbValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_enabled": basetypes.BoolType{},
		"params": basetypes.MapType{
			ElemType: types.StringType,
		},
		"phase":   basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MetricsServerType{}

type MetricsServerType struct {
	basetypes.ObjectType
}

func (t MetricsServerType) Equal(o attr.Type) bool {
	other, ok := o.(MetricsServerType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MetricsServerType) String() string {
	return "MetricsServerType"
}

func (t MetricsServerType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return nil, diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return nil, diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return nil, diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MetricsServerValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewMetricsServerValueNull() MetricsServerValue {
	return MetricsServerValue{
		state: attr.ValueStateNull,
	}
}

func NewMetricsServerValueUnknown() MetricsServerValue {
	return MetricsServerValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMetricsServerValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MetricsServerValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MetricsServerValue Attribute Value",
				"While creating a MetricsServerValue value, a missing attribute value was detected. "+
					"A MetricsServerValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetricsServerValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MetricsServerValue Attribute Type",
				"While creating a MetricsServerValue value, an invalid attribute value was detected. "+
					"A MetricsServerValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MetricsServerValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MetricsServerValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MetricsServerValue Attribute Value",
				"While creating a MetricsServerValue value, an extra attribute value was detected. "+
					"A MetricsServerValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MetricsServerValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMetricsServerValueUnknown(), diags
	}

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return NewMetricsServerValueUnknown(), diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return NewMetricsServerValueUnknown(), diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return NewMetricsServerValueUnknown(), diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewMetricsServerValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewMetricsServerValueUnknown(), diags
	}

	return MetricsServerValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewMetricsServerValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MetricsServerValue {
	object, diags := NewMetricsServerValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMetricsServerValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MetricsServerType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMetricsServerValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMetricsServerValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMetricsServerValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMetricsServerValueMust(MetricsServerValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MetricsServerType) ValueType(ctx context.Context) attr.Value {
	return MetricsServerValue{}
}

var _ basetypes.ObjectValuable = MetricsServerValue{}

type MetricsServerValue struct {
	IsEnabled basetypes.BoolValue   `tfsdk:"is_enabled"`
	Params    basetypes.MapValue    `tfsdk:"params"`
	Phase     basetypes.StringValue `tfsdk:"phase"`
	Version   basetypes.StringValue `tfsdk:"version"`
	state     attr.ValueState
}

func (v MetricsServerValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["is_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["params"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["phase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IsEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_enabled"] = val

		val, err = v.Params.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["params"] = val

		val, err = v.Phase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["phase"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MetricsServerValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MetricsServerValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MetricsServerValue) String() string {
	return "MetricsServerValue"
}

func (v MetricsServerValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	paramsVal, d := types.MapValue(types.StringType, v.Params.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		},
		map[string]attr.Value{
			"is_enabled": v.IsEnabled,
			"params":     paramsVal,
			"phase":      v.Phase,
			"version":    v.Version,
		})

	return objVal, diags
}

func (v MetricsServerValue) Equal(o attr.Value) bool {
	other, ok := o.(MetricsServerValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsEnabled.Equal(other.IsEnabled) {
		return false
	}

	if !v.Params.Equal(other.Params) {
		return false
	}

	if !v.Phase.Equal(other.Phase) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v MetricsServerValue) Type(ctx context.Context) attr.Type {
	return MetricsServerType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MetricsServerValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_enabled": basetypes.BoolType{},
		"params": basetypes.MapType{
			ElemType: types.StringType,
		},
		"phase":   basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = MonitoringType{}

type MonitoringType struct {
	basetypes.ObjectType
}

func (t MonitoringType) Equal(o attr.Type) bool {
	other, ok := o.(MonitoringType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t MonitoringType) String() string {
	return "MonitoringType"
}

func (t MonitoringType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return nil, diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return nil, diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return nil, diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return MonitoringValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewMonitoringValueNull() MonitoringValue {
	return MonitoringValue{
		state: attr.ValueStateNull,
	}
}

func NewMonitoringValueUnknown() MonitoringValue {
	return MonitoringValue{
		state: attr.ValueStateUnknown,
	}
}

func NewMonitoringValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (MonitoringValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing MonitoringValue Attribute Value",
				"While creating a MonitoringValue value, a missing attribute value was detected. "+
					"A MonitoringValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MonitoringValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid MonitoringValue Attribute Type",
				"While creating a MonitoringValue value, an invalid attribute value was detected. "+
					"A MonitoringValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("MonitoringValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("MonitoringValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra MonitoringValue Attribute Value",
				"While creating a MonitoringValue value, an extra attribute value was detected. "+
					"A MonitoringValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra MonitoringValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewMonitoringValueUnknown(), diags
	}

	isEnabledAttribute, ok := attributes["is_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_enabled is missing from object`)

		return NewMonitoringValueUnknown(), diags
	}

	isEnabledVal, ok := isEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_enabled expected to be basetypes.BoolValue, was: %T`, isEnabledAttribute))
	}

	paramsAttribute, ok := attributes["params"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`params is missing from object`)

		return NewMonitoringValueUnknown(), diags
	}

	paramsVal, ok := paramsAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`params expected to be basetypes.MapValue, was: %T`, paramsAttribute))
	}

	phaseAttribute, ok := attributes["phase"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`phase is missing from object`)

		return NewMonitoringValueUnknown(), diags
	}

	phaseVal, ok := phaseAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`phase expected to be basetypes.StringValue, was: %T`, phaseAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewMonitoringValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewMonitoringValueUnknown(), diags
	}

	return MonitoringValue{
		IsEnabled: isEnabledVal,
		Params:    paramsVal,
		Phase:     phaseVal,
		Version:   versionVal,
		state:     attr.ValueStateKnown,
	}, diags
}

func NewMonitoringValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) MonitoringValue {
	object, diags := NewMonitoringValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewMonitoringValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t MonitoringType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewMonitoringValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewMonitoringValueUnknown(), nil
	}

	if in.IsNull() {
		return NewMonitoringValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewMonitoringValueMust(MonitoringValue{}.AttributeTypes(ctx), attributes), nil
}

func (t MonitoringType) ValueType(ctx context.Context) attr.Value {
	return MonitoringValue{}
}

var _ basetypes.ObjectValuable = MonitoringValue{}

type MonitoringValue struct {
	IsEnabled basetypes.BoolValue   `tfsdk:"is_enabled"`
	Params    basetypes.MapValue    `tfsdk:"params"`
	Phase     basetypes.StringValue `tfsdk:"phase"`
	Version   basetypes.StringValue `tfsdk:"version"`
	state     attr.ValueState
}

func (v MonitoringValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["is_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["params"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["phase"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.IsEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_enabled"] = val

		val, err = v.Params.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["params"] = val

		val, err = v.Phase.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["phase"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v MonitoringValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v MonitoringValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v MonitoringValue) String() string {
	return "MonitoringValue"
}

func (v MonitoringValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	paramsVal, d := types.MapValue(types.StringType, v.Params.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"is_enabled": basetypes.BoolType{},
			"params": basetypes.MapType{
				ElemType: types.StringType,
			},
			"phase":   basetypes.StringType{},
			"version": basetypes.StringType{},
		},
		map[string]attr.Value{
			"is_enabled": v.IsEnabled,
			"params":     paramsVal,
			"phase":      v.Phase,
			"version":    v.Version,
		})

	return objVal, diags
}

func (v MonitoringValue) Equal(o attr.Value) bool {
	other, ok := o.(MonitoringValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.IsEnabled.Equal(other.IsEnabled) {
		return false
	}

	if !v.Params.Equal(other.Params) {
		return false
	}

	if !v.Phase.Equal(other.Phase) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v MonitoringValue) Type(ctx context.Context) attr.Type {
	return MonitoringType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v MonitoringValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"is_enabled": basetypes.BoolType{},
		"params": basetypes.MapType{
			ElemType: types.StringType,
		},
		"phase":   basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = EtcdBackupType{}

type EtcdBackupType struct {
	basetypes.ObjectType
}

func (t EtcdBackupType) Equal(o attr.Type) bool {
	other, ok := o.(EtcdBackupType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t EtcdBackupType) String() string {
	return "EtcdBackupType"
}

func (t EtcdBackupType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dailyBackupTimeAttribute, ok := attributes["daily_backup_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`daily_backup_time is missing from object`)

		return nil, diags
	}

	dailyBackupTimeVal, ok := dailyBackupTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`daily_backup_time expected to be basetypes.StringValue, was: %T`, dailyBackupTimeAttribute))
	}

	intervalInHoursAttribute, ok := attributes["interval_in_hours"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval_in_hours is missing from object`)

		return nil, diags
	}

	intervalInHoursVal, ok := intervalInHoursAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval_in_hours expected to be basetypes.Int64Value, was: %T`, intervalInHoursAttribute))
	}

	intervalInMinsAttribute, ok := attributes["interval_in_mins"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval_in_mins is missing from object`)

		return nil, diags
	}

	intervalInMinsVal, ok := intervalInMinsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval_in_mins expected to be basetypes.Int64Value, was: %T`, intervalInMinsAttribute))
	}

	isEtcdBackupEnabledAttribute, ok := attributes["is_etcd_backup_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_etcd_backup_enabled is missing from object`)

		return nil, diags
	}

	isEtcdBackupEnabledVal, ok := isEtcdBackupEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_etcd_backup_enabled expected to be basetypes.BoolValue, was: %T`, isEtcdBackupEnabledAttribute))
	}

	maxIntervalBackupCountAttribute, ok := attributes["max_interval_backup_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_interval_backup_count is missing from object`)

		return nil, diags
	}

	maxIntervalBackupCountVal, ok := maxIntervalBackupCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_interval_backup_count expected to be basetypes.Int64Value, was: %T`, maxIntervalBackupCountAttribute))
	}

	maxTimestampBackupCountAttribute, ok := attributes["max_timestamp_backup_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_timestamp_backup_count is missing from object`)

		return nil, diags
	}

	maxTimestampBackupCountVal, ok := maxTimestampBackupCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_timestamp_backup_count expected to be basetypes.Int64Value, was: %T`, maxTimestampBackupCountAttribute))
	}

	storageLocalPathAttribute, ok := attributes["storage_local_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_local_path is missing from object`)

		return nil, diags
	}

	storageLocalPathVal, ok := storageLocalPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_local_path expected to be basetypes.StringValue, was: %T`, storageLocalPathAttribute))
	}

	storageTypeAttribute, ok := attributes["storage_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_type is missing from object`)

		return nil, diags
	}

	storageTypeVal, ok := storageTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_type expected to be basetypes.StringValue, was: %T`, storageTypeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return EtcdBackupValue{
		DailyBackupTime:         dailyBackupTimeVal,
		IntervalInHours:         intervalInHoursVal,
		IntervalInMins:          intervalInMinsVal,
		IsEtcdBackupEnabled:     isEtcdBackupEnabledVal,
		MaxIntervalBackupCount:  maxIntervalBackupCountVal,
		MaxTimestampBackupCount: maxTimestampBackupCountVal,
		StorageLocalPath:        storageLocalPathVal,
		StorageType:             storageTypeVal,
		state:                   attr.ValueStateKnown,
	}, diags
}

func NewEtcdBackupValueNull() EtcdBackupValue {
	return EtcdBackupValue{
		state: attr.ValueStateNull,
	}
}

func NewEtcdBackupValueUnknown() EtcdBackupValue {
	return EtcdBackupValue{
		state: attr.ValueStateUnknown,
	}
}

func NewEtcdBackupValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (EtcdBackupValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing EtcdBackupValue Attribute Value",
				"While creating a EtcdBackupValue value, a missing attribute value was detected. "+
					"A EtcdBackupValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EtcdBackupValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid EtcdBackupValue Attribute Type",
				"While creating a EtcdBackupValue value, an invalid attribute value was detected. "+
					"A EtcdBackupValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EtcdBackupValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("EtcdBackupValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra EtcdBackupValue Attribute Value",
				"While creating a EtcdBackupValue value, an extra attribute value was detected. "+
					"A EtcdBackupValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra EtcdBackupValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewEtcdBackupValueUnknown(), diags
	}

	dailyBackupTimeAttribute, ok := attributes["daily_backup_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`daily_backup_time is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	dailyBackupTimeVal, ok := dailyBackupTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`daily_backup_time expected to be basetypes.StringValue, was: %T`, dailyBackupTimeAttribute))
	}

	intervalInHoursAttribute, ok := attributes["interval_in_hours"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval_in_hours is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	intervalInHoursVal, ok := intervalInHoursAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval_in_hours expected to be basetypes.Int64Value, was: %T`, intervalInHoursAttribute))
	}

	intervalInMinsAttribute, ok := attributes["interval_in_mins"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval_in_mins is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	intervalInMinsVal, ok := intervalInMinsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval_in_mins expected to be basetypes.Int64Value, was: %T`, intervalInMinsAttribute))
	}

	isEtcdBackupEnabledAttribute, ok := attributes["is_etcd_backup_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_etcd_backup_enabled is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	isEtcdBackupEnabledVal, ok := isEtcdBackupEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_etcd_backup_enabled expected to be basetypes.BoolValue, was: %T`, isEtcdBackupEnabledAttribute))
	}

	maxIntervalBackupCountAttribute, ok := attributes["max_interval_backup_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_interval_backup_count is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	maxIntervalBackupCountVal, ok := maxIntervalBackupCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_interval_backup_count expected to be basetypes.Int64Value, was: %T`, maxIntervalBackupCountAttribute))
	}

	maxTimestampBackupCountAttribute, ok := attributes["max_timestamp_backup_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_timestamp_backup_count is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	maxTimestampBackupCountVal, ok := maxTimestampBackupCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_timestamp_backup_count expected to be basetypes.Int64Value, was: %T`, maxTimestampBackupCountAttribute))
	}

	storageLocalPathAttribute, ok := attributes["storage_local_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_local_path is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	storageLocalPathVal, ok := storageLocalPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_local_path expected to be basetypes.StringValue, was: %T`, storageLocalPathAttribute))
	}

	storageTypeAttribute, ok := attributes["storage_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_type is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	storageTypeVal, ok := storageTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_type expected to be basetypes.StringValue, was: %T`, storageTypeAttribute))
	}

	if diags.HasError() {
		return NewEtcdBackupValueUnknown(), diags
	}

	return EtcdBackupValue{
		DailyBackupTime:         dailyBackupTimeVal,
		IntervalInHours:         intervalInHoursVal,
		IntervalInMins:          intervalInMinsVal,
		IsEtcdBackupEnabled:     isEtcdBackupEnabledVal,
		MaxIntervalBackupCount:  maxIntervalBackupCountVal,
		MaxTimestampBackupCount: maxTimestampBackupCountVal,
		StorageLocalPath:        storageLocalPathVal,
		StorageType:             storageTypeVal,
		state:                   attr.ValueStateKnown,
	}, diags
}

func NewEtcdBackupValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) EtcdBackupValue {
	object, diags := NewEtcdBackupValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewEtcdBackupValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t EtcdBackupType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewEtcdBackupValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewEtcdBackupValueUnknown(), nil
	}

	if in.IsNull() {
		return NewEtcdBackupValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewEtcdBackupValueMust(EtcdBackupValue{}.AttributeTypes(ctx), attributes), nil
}

func (t EtcdBackupType) ValueType(ctx context.Context) attr.Value {
	return EtcdBackupValue{}
}

var _ basetypes.ObjectValuable = EtcdBackupValue{}

type EtcdBackupValue struct {
	DailyBackupTime         basetypes.StringValue `tfsdk:"daily_backup_time"`
	IntervalInHours         basetypes.Int64Value  `tfsdk:"interval_in_hours"`
	IntervalInMins          basetypes.Int64Value  `tfsdk:"interval_in_mins"`
	IsEtcdBackupEnabled     basetypes.BoolValue   `tfsdk:"is_etcd_backup_enabled"`
	MaxIntervalBackupCount  basetypes.Int64Value  `tfsdk:"max_interval_backup_count"`
	MaxTimestampBackupCount basetypes.Int64Value  `tfsdk:"max_timestamp_backup_count"`
	StorageLocalPath        basetypes.StringValue `tfsdk:"storage_local_path"`
	StorageType             basetypes.StringValue `tfsdk:"storage_type"`
	state                   attr.ValueState
}

func (v EtcdBackupValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["daily_backup_time"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interval_in_hours"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["interval_in_mins"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["is_etcd_backup_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["max_interval_backup_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["max_timestamp_backup_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["storage_local_path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["storage_type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.DailyBackupTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["daily_backup_time"] = val

		val, err = v.IntervalInHours.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interval_in_hours"] = val

		val, err = v.IntervalInMins.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interval_in_mins"] = val

		val, err = v.IsEtcdBackupEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_etcd_backup_enabled"] = val

		val, err = v.MaxIntervalBackupCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_interval_backup_count"] = val

		val, err = v.MaxTimestampBackupCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_timestamp_backup_count"] = val

		val, err = v.StorageLocalPath.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["storage_local_path"] = val

		val, err = v.StorageType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["storage_type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v EtcdBackupValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v EtcdBackupValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v EtcdBackupValue) String() string {
	return "EtcdBackupValue"
}

func (v EtcdBackupValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"daily_backup_time":          basetypes.StringType{},
			"interval_in_hours":          basetypes.Int64Type{},
			"interval_in_mins":           basetypes.Int64Type{},
			"is_etcd_backup_enabled":     basetypes.BoolType{},
			"max_interval_backup_count":  basetypes.Int64Type{},
			"max_timestamp_backup_count": basetypes.Int64Type{},
			"storage_local_path":         basetypes.StringType{},
			"storage_type":               basetypes.StringType{},
		},
		map[string]attr.Value{
			"daily_backup_time":          v.DailyBackupTime,
			"interval_in_hours":          v.IntervalInHours,
			"interval_in_mins":           v.IntervalInMins,
			"is_etcd_backup_enabled":     v.IsEtcdBackupEnabled,
			"max_interval_backup_count":  v.MaxIntervalBackupCount,
			"max_timestamp_backup_count": v.MaxTimestampBackupCount,
			"storage_local_path":         v.StorageLocalPath,
			"storage_type":               v.StorageType,
		})

	return objVal, diags
}

func (v EtcdBackupValue) Equal(o attr.Value) bool {
	other, ok := o.(EtcdBackupValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DailyBackupTime.Equal(other.DailyBackupTime) {
		return false
	}

	if !v.IntervalInHours.Equal(other.IntervalInHours) {
		return false
	}

	if !v.IntervalInMins.Equal(other.IntervalInMins) {
		return false
	}

	if !v.IsEtcdBackupEnabled.Equal(other.IsEtcdBackupEnabled) {
		return false
	}

	if !v.MaxIntervalBackupCount.Equal(other.MaxIntervalBackupCount) {
		return false
	}

	if !v.MaxTimestampBackupCount.Equal(other.MaxTimestampBackupCount) {
		return false
	}

	if !v.StorageLocalPath.Equal(other.StorageLocalPath) {
		return false
	}

	if !v.StorageType.Equal(other.StorageType) {
		return false
	}

	return true
}

func (v EtcdBackupValue) Type(ctx context.Context) attr.Type {
	return EtcdBackupType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v EtcdBackupValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"daily_backup_time":          basetypes.StringType{},
		"interval_in_hours":          basetypes.Int64Type{},
		"interval_in_mins":           basetypes.Int64Type{},
		"is_etcd_backup_enabled":     basetypes.BoolType{},
		"max_interval_backup_count":  basetypes.Int64Type{},
		"max_timestamp_backup_count": basetypes.Int64Type{},
		"storage_local_path":         basetypes.StringType{},
		"storage_type":               basetypes.StringType{},
	}
}
