// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_nodepools

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func NodepoolsDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"filter": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"name": schema.StringAttribute{
						Required:            true,
						Description:         "Name of the attribute on which this filter is applied",
						MarkdownDescription: "Name of the attribute on which this filter is applied",
						Validators: []validator.String{
							stringvalidator.OneOf("name", "cloud_provider_name", "cloud_provider_uuid"),
						},
					},
					"values": schema.ListAttribute{
						ElementType: types.StringType,
						Required:    true,
					},
				},
				CustomType: FilterType{
					ObjectType: types.ObjectType{
						AttrTypes: FilterValue{}.AttributeTypes(ctx),
					},
				},
				Required: true,
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Placeholder for ID",
				MarkdownDescription: "Placeholder for ID",
			},
			"nodepools": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"cloud_provider_name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the cloud provider",
							MarkdownDescription: "Name of the cloud provider",
						},
						"cloud_provider_uuid": schema.StringAttribute{
							Computed:            true,
							Description:         "UUID of the cloud provider",
							MarkdownDescription: "UUID of the cloud provider",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "UUID of the nodepool",
							MarkdownDescription: "UUID of the nodepool",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the nodepool",
							MarkdownDescription: "Name of the nodepool",
						},
					},
					CustomType: NodepoolsType{
						ObjectType: types.ObjectType{
							AttrTypes: NodepoolsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed:            true,
				Description:         "List of nodepools matched to the filter",
				MarkdownDescription: "List of nodepools matched to the filter",
			},
		},
	}
}

type NodepoolsModel struct {
	Filter    FilterValue  `tfsdk:"filter"`
	Id        types.String `tfsdk:"id"`
	Nodepools types.List   `tfsdk:"nodepools"`
}

var _ basetypes.ObjectTypable = FilterType{}

type FilterType struct {
	basetypes.ObjectType
}

func (t FilterType) Equal(o attr.Type) bool {
	other, ok := o.(FilterType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FilterType) String() string {
	return "FilterType"
}

func (t FilterType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valuesAttribute, ok := attributes["values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`values is missing from object`)

		return nil, diags
	}

	valuesVal, ok := valuesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`values expected to be basetypes.ListValue, was: %T`, valuesAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FilterValue{
		Name:   nameVal,
		Values: valuesVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewFilterValueNull() FilterValue {
	return FilterValue{
		state: attr.ValueStateNull,
	}
}

func NewFilterValueUnknown() FilterValue {
	return FilterValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFilterValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FilterValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FilterValue Attribute Value",
				"While creating a FilterValue value, a missing attribute value was detected. "+
					"A FilterValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FilterValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FilterValue Attribute Type",
				"While creating a FilterValue value, an invalid attribute value was detected. "+
					"A FilterValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FilterValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FilterValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FilterValue Attribute Value",
				"While creating a FilterValue value, an extra attribute value was detected. "+
					"A FilterValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FilterValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFilterValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewFilterValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valuesAttribute, ok := attributes["values"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`values is missing from object`)

		return NewFilterValueUnknown(), diags
	}

	valuesVal, ok := valuesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`values expected to be basetypes.ListValue, was: %T`, valuesAttribute))
	}

	if diags.HasError() {
		return NewFilterValueUnknown(), diags
	}

	return FilterValue{
		Name:   nameVal,
		Values: valuesVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewFilterValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FilterValue {
	object, diags := NewFilterValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFilterValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FilterType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFilterValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFilterValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFilterValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFilterValueMust(FilterValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FilterType) ValueType(ctx context.Context) attr.Value {
	return FilterValue{}
}

var _ basetypes.ObjectValuable = FilterValue{}

type FilterValue struct {
	Name   basetypes.StringValue `tfsdk:"name"`
	Values basetypes.ListValue   `tfsdk:"values"`
	state  attr.ValueState
}

func (v FilterValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["values"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Values.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["values"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FilterValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FilterValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FilterValue) String() string {
	return "FilterValue"
}

func (v FilterValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	valuesVal, d := types.ListValue(types.StringType, v.Values.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"name": basetypes.StringType{},
			"values": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"name": basetypes.StringType{},
			"values": basetypes.ListType{
				ElemType: types.StringType,
			},
		},
		map[string]attr.Value{
			"name":   v.Name,
			"values": valuesVal,
		})

	return objVal, diags
}

func (v FilterValue) Equal(o attr.Value) bool {
	other, ok := o.(FilterValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Values.Equal(other.Values) {
		return false
	}

	return true
}

func (v FilterValue) Type(ctx context.Context) attr.Type {
	return FilterType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FilterValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name": basetypes.StringType{},
		"values": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = NodepoolsType{}

type NodepoolsType struct {
	basetypes.ObjectType
}

func (t NodepoolsType) Equal(o attr.Type) bool {
	other, ok := o.(NodepoolsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t NodepoolsType) String() string {
	return "NodepoolsType"
}

func (t NodepoolsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	cloudProviderNameAttribute, ok := attributes["cloud_provider_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cloud_provider_name is missing from object`)

		return nil, diags
	}

	cloudProviderNameVal, ok := cloudProviderNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cloud_provider_name expected to be basetypes.StringValue, was: %T`, cloudProviderNameAttribute))
	}

	cloudProviderUuidAttribute, ok := attributes["cloud_provider_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cloud_provider_uuid is missing from object`)

		return nil, diags
	}

	cloudProviderUuidVal, ok := cloudProviderUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cloud_provider_uuid expected to be basetypes.StringValue, was: %T`, cloudProviderUuidAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return nil, diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return NodepoolsValue{
		CloudProviderName: cloudProviderNameVal,
		CloudProviderUuid: cloudProviderUuidVal,
		Id:                idVal,
		Name:              nameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewNodepoolsValueNull() NodepoolsValue {
	return NodepoolsValue{
		state: attr.ValueStateNull,
	}
}

func NewNodepoolsValueUnknown() NodepoolsValue {
	return NodepoolsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewNodepoolsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (NodepoolsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing NodepoolsValue Attribute Value",
				"While creating a NodepoolsValue value, a missing attribute value was detected. "+
					"A NodepoolsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodepoolsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid NodepoolsValue Attribute Type",
				"While creating a NodepoolsValue value, an invalid attribute value was detected. "+
					"A NodepoolsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("NodepoolsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("NodepoolsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra NodepoolsValue Attribute Value",
				"While creating a NodepoolsValue value, an extra attribute value was detected. "+
					"A NodepoolsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra NodepoolsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewNodepoolsValueUnknown(), diags
	}

	cloudProviderNameAttribute, ok := attributes["cloud_provider_name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cloud_provider_name is missing from object`)

		return NewNodepoolsValueUnknown(), diags
	}

	cloudProviderNameVal, ok := cloudProviderNameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cloud_provider_name expected to be basetypes.StringValue, was: %T`, cloudProviderNameAttribute))
	}

	cloudProviderUuidAttribute, ok := attributes["cloud_provider_uuid"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cloud_provider_uuid is missing from object`)

		return NewNodepoolsValueUnknown(), diags
	}

	cloudProviderUuidVal, ok := cloudProviderUuidAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cloud_provider_uuid expected to be basetypes.StringValue, was: %T`, cloudProviderUuidAttribute))
	}

	idAttribute, ok := attributes["id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`id is missing from object`)

		return NewNodepoolsValueUnknown(), diags
	}

	idVal, ok := idAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`id expected to be basetypes.StringValue, was: %T`, idAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewNodepoolsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	if diags.HasError() {
		return NewNodepoolsValueUnknown(), diags
	}

	return NodepoolsValue{
		CloudProviderName: cloudProviderNameVal,
		CloudProviderUuid: cloudProviderUuidVal,
		Id:                idVal,
		Name:              nameVal,
		state:             attr.ValueStateKnown,
	}, diags
}

func NewNodepoolsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) NodepoolsValue {
	object, diags := NewNodepoolsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewNodepoolsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t NodepoolsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewNodepoolsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewNodepoolsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewNodepoolsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewNodepoolsValueMust(NodepoolsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t NodepoolsType) ValueType(ctx context.Context) attr.Value {
	return NodepoolsValue{}
}

var _ basetypes.ObjectValuable = NodepoolsValue{}

type NodepoolsValue struct {
	CloudProviderName basetypes.StringValue `tfsdk:"cloud_provider_name"`
	CloudProviderUuid basetypes.StringValue `tfsdk:"cloud_provider_uuid"`
	Id                basetypes.StringValue `tfsdk:"id"`
	Name              basetypes.StringValue `tfsdk:"name"`
	state             attr.ValueState
}

func (v NodepoolsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["cloud_provider_name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["cloud_provider_uuid"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.CloudProviderName.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cloud_provider_name"] = val

		val, err = v.CloudProviderUuid.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cloud_provider_uuid"] = val

		val, err = v.Id.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["id"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v NodepoolsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v NodepoolsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v NodepoolsValue) String() string {
	return "NodepoolsValue"
}

func (v NodepoolsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"cloud_provider_name": basetypes.StringType{},
			"cloud_provider_uuid": basetypes.StringType{},
			"id":                  basetypes.StringType{},
			"name":                basetypes.StringType{},
		},
		map[string]attr.Value{
			"cloud_provider_name": v.CloudProviderName,
			"cloud_provider_uuid": v.CloudProviderUuid,
			"id":                  v.Id,
			"name":                v.Name,
		})

	return objVal, diags
}

func (v NodepoolsValue) Equal(o attr.Value) bool {
	other, ok := o.(NodepoolsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CloudProviderName.Equal(other.CloudProviderName) {
		return false
	}

	if !v.CloudProviderUuid.Equal(other.CloudProviderUuid) {
		return false
	}

	if !v.Id.Equal(other.Id) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	return true
}

func (v NodepoolsValue) Type(ctx context.Context) attr.Type {
	return NodepoolsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v NodepoolsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"cloud_provider_name": basetypes.StringType{},
		"cloud_provider_uuid": basetypes.StringType{},
		"id":                  basetypes.StringType{},
		"name":                basetypes.StringType{},
	}
}
