// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_cluster

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func ClusterDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"addon_operator_image_tag": schema.StringAttribute{
				Computed: true,
			},
			"addons": schema.SetNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"config": schema.MapAttribute{
							ElementType: types.StringType,
							Computed:    true,
						},
						"enabled": schema.BoolAttribute{
							Computed: true,
						},
						"name": schema.StringAttribute{
							Computed: true,
						},
						"version": schema.StringAttribute{
							Computed: true,
						},
					},
					CustomType: AddonsType{
						ObjectType: types.ObjectType{
							AttrTypes: AddonsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"allow_workloads_on_master": schema.BoolAttribute{
				Computed: true,
			},
			"calico_controller_cpu_limit": schema.StringAttribute{
				Computed: true,
			},
			"calico_controller_memory_limit": schema.StringAttribute{
				Computed: true,
			},
			"calico_ip_ip_mode": schema.StringAttribute{
				Computed: true,
			},
			"calico_ipv4": schema.StringAttribute{
				Computed: true,
			},
			"calico_ipv4_detection_method": schema.StringAttribute{
				Computed: true,
			},
			"calico_ipv6": schema.StringAttribute{
				Computed: true,
			},
			"calico_ipv6_detection_method": schema.StringAttribute{
				Computed: true,
			},
			"calico_ipv6_pool_block_size": schema.StringAttribute{
				Computed: true,
			},
			"calico_ipv6_pool_cidr": schema.StringAttribute{
				Computed: true,
			},
			"calico_ipv6_pool_nat_outgoing": schema.BoolAttribute{
				Computed: true,
			},
			"calico_nat_outgoing": schema.BoolAttribute{
				Computed: true,
			},
			"calico_node_cpu_limit": schema.StringAttribute{
				Computed: true,
			},
			"calico_node_memory_limit": schema.StringAttribute{
				Computed: true,
			},
			"calico_router_id": schema.StringAttribute{
				Computed: true,
			},
			"calico_typha_cpu_limit": schema.StringAttribute{
				Computed: true,
			},
			"calico_typha_memory_limit": schema.StringAttribute{
				Computed: true,
			},
			"calico_v4_block_size": schema.StringAttribute{
				Computed: true,
			},
			"cert_expiry_hrs": schema.Int64Attribute{
				Computed: true,
			},
			"cloud_provider_name": schema.StringAttribute{
				Computed: true,
			},
			"cloud_provider_type": schema.StringAttribute{
				Computed: true,
			},
			"cloud_provider_uuid": schema.StringAttribute{
				Computed: true,
			},
			"container_runtime": schema.StringAttribute{
				Computed: true,
			},
			"containers_cidr": schema.StringAttribute{
				Computed: true,
			},
			"cpu_manager_policy": schema.StringAttribute{
				Computed: true,
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "Time at which the cluster was created",
				MarkdownDescription: "Time at which the cluster was created",
			},
			"custom_registry_cert_path": schema.StringAttribute{
				Computed: true,
			},
			"custom_registry_password": schema.StringAttribute{
				Computed: true,
			},
			"custom_registry_repo_path": schema.StringAttribute{
				Computed: true,
			},
			"custom_registry_self_signed_certs": schema.BoolAttribute{
				Computed: true,
			},
			"custom_registry_skip_tls": schema.BoolAttribute{
				Computed: true,
			},
			"custom_registry_url": schema.StringAttribute{
				Computed: true,
			},
			"custom_registry_username": schema.StringAttribute{
				Computed: true,
			},
			"docker_centos_package_repo_url": schema.StringAttribute{
				Computed: true,
			},
			"docker_private_registry": schema.StringAttribute{
				Computed: true,
			},
			"docker_root": schema.StringAttribute{
				Computed: true,
			},
			"docker_ubuntu_package_repo_url": schema.StringAttribute{
				Computed: true,
			},
			"enable_etcd_encryption": schema.BoolAttribute{
				Computed: true,
			},
			"etcd_backup": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"daily_backup_time": schema.StringAttribute{
						Computed: true,
					},
					"interval_in_hours": schema.Int64Attribute{
						Computed: true,
					},
					"interval_in_mins": schema.Int64Attribute{
						Computed: true,
					},
					"is_etcd_backup_enabled": schema.BoolAttribute{
						Computed: true,
					},
					"max_interval_backup_count": schema.Int64Attribute{
						Computed: true,
					},
					"max_timestamp_backup_count": schema.Int64Attribute{
						Computed: true,
					},
					"storage_local_path": schema.StringAttribute{
						Computed: true,
					},
					"storage_type": schema.StringAttribute{
						Computed: true,
					},
				},
				CustomType: EtcdBackupType{
					ObjectType: types.ObjectType{
						AttrTypes: EtcdBackupValue{}.AttributeTypes(ctx),
					},
				},
				Computed: true,
			},
			"etcd_data_dir": schema.StringAttribute{
				Computed: true,
			},
			"etcd_election_timeout_ms": schema.Int64Attribute{
				Computed: true,
			},
			"etcd_heartbeat_interval_ms": schema.Int64Attribute{
				Computed: true,
			},
			"etcd_version": schema.StringAttribute{
				Computed: true,
			},
			"external_dns_name": schema.StringAttribute{
				Computed: true,
			},
			"felix_ipv6_support": schema.BoolAttribute{
				Computed: true,
			},
			"flannel_iface_label": schema.StringAttribute{
				Computed: true,
			},
			"flannel_public_iface_label": schema.StringAttribute{
				Computed: true,
			},
			"gcr_private_registry": schema.StringAttribute{
				Computed: true,
			},
			"id": schema.StringAttribute{
				Required:            true,
				Description:         "UUID of the cluster",
				MarkdownDescription: "UUID of the cluster",
			},
			"interface_detection_method": schema.StringAttribute{
				Computed: true,
			},
			"interface_name": schema.StringAttribute{
				Computed: true,
			},
			"interface_reachable_ip": schema.StringAttribute{
				Computed: true,
			},
			"ipv6": schema.BoolAttribute{
				Computed: true,
			},
			"k8s_api_port": schema.StringAttribute{
				Computed: true,
			},
			"k8s_private_registry": schema.StringAttribute{
				Computed: true,
			},
			"kube_role_version": schema.StringAttribute{
				Computed: true,
			},
			"last_ok": schema.StringAttribute{
				Computed: true,
			},
			"last_op": schema.StringAttribute{
				Computed: true,
			},
			"master_ip": schema.StringAttribute{
				Computed: true,
			},
			"master_nodes": schema.SetAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"master_status": schema.StringAttribute{
				Computed: true,
			},
			"master_vip_iface": schema.StringAttribute{
				Computed: true,
			},
			"master_vip_ipv4": schema.StringAttribute{
				Computed: true,
			},
			"master_vip_vrouter_id": schema.StringAttribute{
				Computed: true,
			},
			"masterless": schema.BoolAttribute{
				Computed: true,
			},
			"mtu_size": schema.Int64Attribute{
				Computed: true,
			},
			"name": schema.StringAttribute{
				Computed:            true,
				Description:         "Name of the cluster",
				MarkdownDescription: "Name of the cluster",
			},
			"network_plugin": schema.StringAttribute{
				Computed: true,
			},
			"node_pool_name": schema.StringAttribute{
				Computed: true,
			},
			"node_pool_uuid": schema.StringAttribute{
				Computed: true,
			},
			"privileged": schema.BoolAttribute{
				Computed: true,
			},
			"project_id": schema.StringAttribute{
				Computed: true,
			},
			"quay_private_registry": schema.StringAttribute{
				Computed: true,
			},
			"runtime_config": schema.StringAttribute{
				Computed: true,
			},
			"services_cidr": schema.StringAttribute{
				Computed: true,
			},
			"status": schema.StringAttribute{
				Computed: true,
			},
			"tags": schema.MapAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"task_error": schema.StringAttribute{
				Computed: true,
			},
			"task_status": schema.StringAttribute{
				Computed: true,
			},
			"topology_manager_policy": schema.StringAttribute{
				Computed: true,
			},
			"use_hostname": schema.BoolAttribute{
				Computed: true,
			},
			"worker_nodes": schema.SetAttribute{
				ElementType: types.StringType,
				Computed:    true,
			},
			"worker_status": schema.StringAttribute{
				Computed: true,
			},
		},
	}
}

type ClusterModel struct {
	AddonOperatorImageTag         types.String    `tfsdk:"addon_operator_image_tag"`
	Addons                        types.Set       `tfsdk:"addons"`
	AllowWorkloadsOnMaster        types.Bool      `tfsdk:"allow_workloads_on_master"`
	CalicoControllerCpuLimit      types.String    `tfsdk:"calico_controller_cpu_limit"`
	CalicoControllerMemoryLimit   types.String    `tfsdk:"calico_controller_memory_limit"`
	CalicoIpIpMode                types.String    `tfsdk:"calico_ip_ip_mode"`
	CalicoIpv4                    types.String    `tfsdk:"calico_ipv4"`
	CalicoIpv4DetectionMethod     types.String    `tfsdk:"calico_ipv4_detection_method"`
	CalicoIpv6                    types.String    `tfsdk:"calico_ipv6"`
	CalicoIpv6DetectionMethod     types.String    `tfsdk:"calico_ipv6_detection_method"`
	CalicoIpv6PoolBlockSize       types.String    `tfsdk:"calico_ipv6_pool_block_size"`
	CalicoIpv6PoolCidr            types.String    `tfsdk:"calico_ipv6_pool_cidr"`
	CalicoIpv6PoolNatOutgoing     types.Bool      `tfsdk:"calico_ipv6_pool_nat_outgoing"`
	CalicoNatOutgoing             types.Bool      `tfsdk:"calico_nat_outgoing"`
	CalicoNodeCpuLimit            types.String    `tfsdk:"calico_node_cpu_limit"`
	CalicoNodeMemoryLimit         types.String    `tfsdk:"calico_node_memory_limit"`
	CalicoRouterId                types.String    `tfsdk:"calico_router_id"`
	CalicoTyphaCpuLimit           types.String    `tfsdk:"calico_typha_cpu_limit"`
	CalicoTyphaMemoryLimit        types.String    `tfsdk:"calico_typha_memory_limit"`
	CalicoV4BlockSize             types.String    `tfsdk:"calico_v4_block_size"`
	CertExpiryHrs                 types.Int64     `tfsdk:"cert_expiry_hrs"`
	CloudProviderName             types.String    `tfsdk:"cloud_provider_name"`
	CloudProviderType             types.String    `tfsdk:"cloud_provider_type"`
	CloudProviderUuid             types.String    `tfsdk:"cloud_provider_uuid"`
	ContainerRuntime              types.String    `tfsdk:"container_runtime"`
	ContainersCidr                types.String    `tfsdk:"containers_cidr"`
	CpuManagerPolicy              types.String    `tfsdk:"cpu_manager_policy"`
	CreatedAt                     types.String    `tfsdk:"created_at"`
	CustomRegistryCertPath        types.String    `tfsdk:"custom_registry_cert_path"`
	CustomRegistryPassword        types.String    `tfsdk:"custom_registry_password"`
	CustomRegistryRepoPath        types.String    `tfsdk:"custom_registry_repo_path"`
	CustomRegistrySelfSignedCerts types.Bool      `tfsdk:"custom_registry_self_signed_certs"`
	CustomRegistrySkipTls         types.Bool      `tfsdk:"custom_registry_skip_tls"`
	CustomRegistryUrl             types.String    `tfsdk:"custom_registry_url"`
	CustomRegistryUsername        types.String    `tfsdk:"custom_registry_username"`
	DockerCentosPackageRepoUrl    types.String    `tfsdk:"docker_centos_package_repo_url"`
	DockerPrivateRegistry         types.String    `tfsdk:"docker_private_registry"`
	DockerRoot                    types.String    `tfsdk:"docker_root"`
	DockerUbuntuPackageRepoUrl    types.String    `tfsdk:"docker_ubuntu_package_repo_url"`
	EnableEtcdEncryption          types.Bool      `tfsdk:"enable_etcd_encryption"`
	EtcdBackup                    EtcdBackupValue `tfsdk:"etcd_backup"`
	EtcdDataDir                   types.String    `tfsdk:"etcd_data_dir"`
	EtcdElectionTimeoutMs         types.Int64     `tfsdk:"etcd_election_timeout_ms"`
	EtcdHeartbeatIntervalMs       types.Int64     `tfsdk:"etcd_heartbeat_interval_ms"`
	EtcdVersion                   types.String    `tfsdk:"etcd_version"`
	ExternalDnsName               types.String    `tfsdk:"external_dns_name"`
	FelixIpv6Support              types.Bool      `tfsdk:"felix_ipv6_support"`
	FlannelIfaceLabel             types.String    `tfsdk:"flannel_iface_label"`
	FlannelPublicIfaceLabel       types.String    `tfsdk:"flannel_public_iface_label"`
	GcrPrivateRegistry            types.String    `tfsdk:"gcr_private_registry"`
	Id                            types.String    `tfsdk:"id"`
	InterfaceDetectionMethod      types.String    `tfsdk:"interface_detection_method"`
	InterfaceName                 types.String    `tfsdk:"interface_name"`
	InterfaceReachableIp          types.String    `tfsdk:"interface_reachable_ip"`
	Ipv6                          types.Bool      `tfsdk:"ipv6"`
	K8sApiPort                    types.String    `tfsdk:"k8s_api_port"`
	K8sPrivateRegistry            types.String    `tfsdk:"k8s_private_registry"`
	KubeRoleVersion               types.String    `tfsdk:"kube_role_version"`
	LastOk                        types.String    `tfsdk:"last_ok"`
	LastOp                        types.String    `tfsdk:"last_op"`
	MasterIp                      types.String    `tfsdk:"master_ip"`
	MasterNodes                   types.Set       `tfsdk:"master_nodes"`
	MasterStatus                  types.String    `tfsdk:"master_status"`
	MasterVipIface                types.String    `tfsdk:"master_vip_iface"`
	MasterVipIpv4                 types.String    `tfsdk:"master_vip_ipv4"`
	MasterVipVrouterId            types.String    `tfsdk:"master_vip_vrouter_id"`
	Masterless                    types.Bool      `tfsdk:"masterless"`
	MtuSize                       types.Int64     `tfsdk:"mtu_size"`
	Name                          types.String    `tfsdk:"name"`
	NetworkPlugin                 types.String    `tfsdk:"network_plugin"`
	NodePoolName                  types.String    `tfsdk:"node_pool_name"`
	NodePoolUuid                  types.String    `tfsdk:"node_pool_uuid"`
	Privileged                    types.Bool      `tfsdk:"privileged"`
	ProjectId                     types.String    `tfsdk:"project_id"`
	QuayPrivateRegistry           types.String    `tfsdk:"quay_private_registry"`
	RuntimeConfig                 types.String    `tfsdk:"runtime_config"`
	ServicesCidr                  types.String    `tfsdk:"services_cidr"`
	Status                        types.String    `tfsdk:"status"`
	Tags                          types.Map       `tfsdk:"tags"`
	TaskError                     types.String    `tfsdk:"task_error"`
	TaskStatus                    types.String    `tfsdk:"task_status"`
	TopologyManagerPolicy         types.String    `tfsdk:"topology_manager_policy"`
	UseHostname                   types.Bool      `tfsdk:"use_hostname"`
	WorkerNodes                   types.Set       `tfsdk:"worker_nodes"`
	WorkerStatus                  types.String    `tfsdk:"worker_status"`
}

var _ basetypes.ObjectTypable = AddonsType{}

type AddonsType struct {
	basetypes.ObjectType
}

func (t AddonsType) Equal(o attr.Type) bool {
	other, ok := o.(AddonsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AddonsType) String() string {
	return "AddonsType"
}

func (t AddonsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	configAttribute, ok := attributes["config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config is missing from object`)

		return nil, diags
	}

	configVal, ok := configAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config expected to be basetypes.MapValue, was: %T`, configAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return nil, diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return nil, diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AddonsValue{
		Config:  configVal,
		Enabled: enabledVal,
		Name:    nameVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewAddonsValueNull() AddonsValue {
	return AddonsValue{
		state: attr.ValueStateNull,
	}
}

func NewAddonsValueUnknown() AddonsValue {
	return AddonsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAddonsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AddonsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AddonsValue Attribute Value",
				"While creating a AddonsValue value, a missing attribute value was detected. "+
					"A AddonsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AddonsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AddonsValue Attribute Type",
				"While creating a AddonsValue value, an invalid attribute value was detected. "+
					"A AddonsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AddonsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AddonsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AddonsValue Attribute Value",
				"While creating a AddonsValue value, an extra attribute value was detected. "+
					"A AddonsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AddonsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAddonsValueUnknown(), diags
	}

	configAttribute, ok := attributes["config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	configVal, ok := configAttribute.(basetypes.MapValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config expected to be basetypes.MapValue, was: %T`, configAttribute))
	}

	enabledAttribute, ok := attributes["enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enabled is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	enabledVal, ok := enabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enabled expected to be basetypes.BoolValue, was: %T`, enabledAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	versionAttribute, ok := attributes["version"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`version is missing from object`)

		return NewAddonsValueUnknown(), diags
	}

	versionVal, ok := versionAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`version expected to be basetypes.StringValue, was: %T`, versionAttribute))
	}

	if diags.HasError() {
		return NewAddonsValueUnknown(), diags
	}

	return AddonsValue{
		Config:  configVal,
		Enabled: enabledVal,
		Name:    nameVal,
		Version: versionVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewAddonsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AddonsValue {
	object, diags := NewAddonsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAddonsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AddonsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAddonsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAddonsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAddonsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAddonsValueMust(AddonsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AddonsType) ValueType(ctx context.Context) attr.Value {
	return AddonsValue{}
}

var _ basetypes.ObjectValuable = AddonsValue{}

type AddonsValue struct {
	Config  basetypes.MapValue    `tfsdk:"config"`
	Enabled basetypes.BoolValue   `tfsdk:"enabled"`
	Name    basetypes.StringValue `tfsdk:"name"`
	Version basetypes.StringValue `tfsdk:"version"`
	state   attr.ValueState
}

func (v AddonsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["config"] = basetypes.MapType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["version"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Config.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["config"] = val

		val, err = v.Enabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enabled"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Version.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["version"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AddonsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AddonsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AddonsValue) String() string {
	return "AddonsValue"
}

func (v AddonsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	configVal, d := types.MapValue(types.StringType, v.Config.Elements())

	diags.Append(d...)

	if d.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"config": basetypes.MapType{
				ElemType: types.StringType,
			},
			"enabled": basetypes.BoolType{},
			"name":    basetypes.StringType{},
			"version": basetypes.StringType{},
		}), diags
	}

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"config": basetypes.MapType{
				ElemType: types.StringType,
			},
			"enabled": basetypes.BoolType{},
			"name":    basetypes.StringType{},
			"version": basetypes.StringType{},
		},
		map[string]attr.Value{
			"config":  configVal,
			"enabled": v.Enabled,
			"name":    v.Name,
			"version": v.Version,
		})

	return objVal, diags
}

func (v AddonsValue) Equal(o attr.Value) bool {
	other, ok := o.(AddonsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Config.Equal(other.Config) {
		return false
	}

	if !v.Enabled.Equal(other.Enabled) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Version.Equal(other.Version) {
		return false
	}

	return true
}

func (v AddonsValue) Type(ctx context.Context) attr.Type {
	return AddonsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AddonsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"config": basetypes.MapType{
			ElemType: types.StringType,
		},
		"enabled": basetypes.BoolType{},
		"name":    basetypes.StringType{},
		"version": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = EtcdBackupType{}

type EtcdBackupType struct {
	basetypes.ObjectType
}

func (t EtcdBackupType) Equal(o attr.Type) bool {
	other, ok := o.(EtcdBackupType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t EtcdBackupType) String() string {
	return "EtcdBackupType"
}

func (t EtcdBackupType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dailyBackupTimeAttribute, ok := attributes["daily_backup_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`daily_backup_time is missing from object`)

		return nil, diags
	}

	dailyBackupTimeVal, ok := dailyBackupTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`daily_backup_time expected to be basetypes.StringValue, was: %T`, dailyBackupTimeAttribute))
	}

	intervalInHoursAttribute, ok := attributes["interval_in_hours"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval_in_hours is missing from object`)

		return nil, diags
	}

	intervalInHoursVal, ok := intervalInHoursAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval_in_hours expected to be basetypes.Int64Value, was: %T`, intervalInHoursAttribute))
	}

	intervalInMinsAttribute, ok := attributes["interval_in_mins"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval_in_mins is missing from object`)

		return nil, diags
	}

	intervalInMinsVal, ok := intervalInMinsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval_in_mins expected to be basetypes.Int64Value, was: %T`, intervalInMinsAttribute))
	}

	isEtcdBackupEnabledAttribute, ok := attributes["is_etcd_backup_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_etcd_backup_enabled is missing from object`)

		return nil, diags
	}

	isEtcdBackupEnabledVal, ok := isEtcdBackupEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_etcd_backup_enabled expected to be basetypes.BoolValue, was: %T`, isEtcdBackupEnabledAttribute))
	}

	maxIntervalBackupCountAttribute, ok := attributes["max_interval_backup_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_interval_backup_count is missing from object`)

		return nil, diags
	}

	maxIntervalBackupCountVal, ok := maxIntervalBackupCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_interval_backup_count expected to be basetypes.Int64Value, was: %T`, maxIntervalBackupCountAttribute))
	}

	maxTimestampBackupCountAttribute, ok := attributes["max_timestamp_backup_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_timestamp_backup_count is missing from object`)

		return nil, diags
	}

	maxTimestampBackupCountVal, ok := maxTimestampBackupCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_timestamp_backup_count expected to be basetypes.Int64Value, was: %T`, maxTimestampBackupCountAttribute))
	}

	storageLocalPathAttribute, ok := attributes["storage_local_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_local_path is missing from object`)

		return nil, diags
	}

	storageLocalPathVal, ok := storageLocalPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_local_path expected to be basetypes.StringValue, was: %T`, storageLocalPathAttribute))
	}

	storageTypeAttribute, ok := attributes["storage_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_type is missing from object`)

		return nil, diags
	}

	storageTypeVal, ok := storageTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_type expected to be basetypes.StringValue, was: %T`, storageTypeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return EtcdBackupValue{
		DailyBackupTime:         dailyBackupTimeVal,
		IntervalInHours:         intervalInHoursVal,
		IntervalInMins:          intervalInMinsVal,
		IsEtcdBackupEnabled:     isEtcdBackupEnabledVal,
		MaxIntervalBackupCount:  maxIntervalBackupCountVal,
		MaxTimestampBackupCount: maxTimestampBackupCountVal,
		StorageLocalPath:        storageLocalPathVal,
		StorageType:             storageTypeVal,
		state:                   attr.ValueStateKnown,
	}, diags
}

func NewEtcdBackupValueNull() EtcdBackupValue {
	return EtcdBackupValue{
		state: attr.ValueStateNull,
	}
}

func NewEtcdBackupValueUnknown() EtcdBackupValue {
	return EtcdBackupValue{
		state: attr.ValueStateUnknown,
	}
}

func NewEtcdBackupValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (EtcdBackupValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing EtcdBackupValue Attribute Value",
				"While creating a EtcdBackupValue value, a missing attribute value was detected. "+
					"A EtcdBackupValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EtcdBackupValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid EtcdBackupValue Attribute Type",
				"While creating a EtcdBackupValue value, an invalid attribute value was detected. "+
					"A EtcdBackupValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EtcdBackupValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("EtcdBackupValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra EtcdBackupValue Attribute Value",
				"While creating a EtcdBackupValue value, an extra attribute value was detected. "+
					"A EtcdBackupValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra EtcdBackupValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewEtcdBackupValueUnknown(), diags
	}

	dailyBackupTimeAttribute, ok := attributes["daily_backup_time"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`daily_backup_time is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	dailyBackupTimeVal, ok := dailyBackupTimeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`daily_backup_time expected to be basetypes.StringValue, was: %T`, dailyBackupTimeAttribute))
	}

	intervalInHoursAttribute, ok := attributes["interval_in_hours"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval_in_hours is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	intervalInHoursVal, ok := intervalInHoursAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval_in_hours expected to be basetypes.Int64Value, was: %T`, intervalInHoursAttribute))
	}

	intervalInMinsAttribute, ok := attributes["interval_in_mins"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`interval_in_mins is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	intervalInMinsVal, ok := intervalInMinsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`interval_in_mins expected to be basetypes.Int64Value, was: %T`, intervalInMinsAttribute))
	}

	isEtcdBackupEnabledAttribute, ok := attributes["is_etcd_backup_enabled"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`is_etcd_backup_enabled is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	isEtcdBackupEnabledVal, ok := isEtcdBackupEnabledAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`is_etcd_backup_enabled expected to be basetypes.BoolValue, was: %T`, isEtcdBackupEnabledAttribute))
	}

	maxIntervalBackupCountAttribute, ok := attributes["max_interval_backup_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_interval_backup_count is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	maxIntervalBackupCountVal, ok := maxIntervalBackupCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_interval_backup_count expected to be basetypes.Int64Value, was: %T`, maxIntervalBackupCountAttribute))
	}

	maxTimestampBackupCountAttribute, ok := attributes["max_timestamp_backup_count"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`max_timestamp_backup_count is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	maxTimestampBackupCountVal, ok := maxTimestampBackupCountAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`max_timestamp_backup_count expected to be basetypes.Int64Value, was: %T`, maxTimestampBackupCountAttribute))
	}

	storageLocalPathAttribute, ok := attributes["storage_local_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_local_path is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	storageLocalPathVal, ok := storageLocalPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_local_path expected to be basetypes.StringValue, was: %T`, storageLocalPathAttribute))
	}

	storageTypeAttribute, ok := attributes["storage_type"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`storage_type is missing from object`)

		return NewEtcdBackupValueUnknown(), diags
	}

	storageTypeVal, ok := storageTypeAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`storage_type expected to be basetypes.StringValue, was: %T`, storageTypeAttribute))
	}

	if diags.HasError() {
		return NewEtcdBackupValueUnknown(), diags
	}

	return EtcdBackupValue{
		DailyBackupTime:         dailyBackupTimeVal,
		IntervalInHours:         intervalInHoursVal,
		IntervalInMins:          intervalInMinsVal,
		IsEtcdBackupEnabled:     isEtcdBackupEnabledVal,
		MaxIntervalBackupCount:  maxIntervalBackupCountVal,
		MaxTimestampBackupCount: maxTimestampBackupCountVal,
		StorageLocalPath:        storageLocalPathVal,
		StorageType:             storageTypeVal,
		state:                   attr.ValueStateKnown,
	}, diags
}

func NewEtcdBackupValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) EtcdBackupValue {
	object, diags := NewEtcdBackupValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewEtcdBackupValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t EtcdBackupType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewEtcdBackupValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewEtcdBackupValueUnknown(), nil
	}

	if in.IsNull() {
		return NewEtcdBackupValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewEtcdBackupValueMust(EtcdBackupValue{}.AttributeTypes(ctx), attributes), nil
}

func (t EtcdBackupType) ValueType(ctx context.Context) attr.Value {
	return EtcdBackupValue{}
}

var _ basetypes.ObjectValuable = EtcdBackupValue{}

type EtcdBackupValue struct {
	DailyBackupTime         basetypes.StringValue `tfsdk:"daily_backup_time"`
	IntervalInHours         basetypes.Int64Value  `tfsdk:"interval_in_hours"`
	IntervalInMins          basetypes.Int64Value  `tfsdk:"interval_in_mins"`
	IsEtcdBackupEnabled     basetypes.BoolValue   `tfsdk:"is_etcd_backup_enabled"`
	MaxIntervalBackupCount  basetypes.Int64Value  `tfsdk:"max_interval_backup_count"`
	MaxTimestampBackupCount basetypes.Int64Value  `tfsdk:"max_timestamp_backup_count"`
	StorageLocalPath        basetypes.StringValue `tfsdk:"storage_local_path"`
	StorageType             basetypes.StringValue `tfsdk:"storage_type"`
	state                   attr.ValueState
}

func (v EtcdBackupValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["daily_backup_time"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["interval_in_hours"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["interval_in_mins"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["is_etcd_backup_enabled"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["max_interval_backup_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["max_timestamp_backup_count"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["storage_local_path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["storage_type"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.DailyBackupTime.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["daily_backup_time"] = val

		val, err = v.IntervalInHours.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interval_in_hours"] = val

		val, err = v.IntervalInMins.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["interval_in_mins"] = val

		val, err = v.IsEtcdBackupEnabled.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["is_etcd_backup_enabled"] = val

		val, err = v.MaxIntervalBackupCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_interval_backup_count"] = val

		val, err = v.MaxTimestampBackupCount.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["max_timestamp_backup_count"] = val

		val, err = v.StorageLocalPath.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["storage_local_path"] = val

		val, err = v.StorageType.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["storage_type"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v EtcdBackupValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v EtcdBackupValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v EtcdBackupValue) String() string {
	return "EtcdBackupValue"
}

func (v EtcdBackupValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"daily_backup_time":          basetypes.StringType{},
			"interval_in_hours":          basetypes.Int64Type{},
			"interval_in_mins":           basetypes.Int64Type{},
			"is_etcd_backup_enabled":     basetypes.BoolType{},
			"max_interval_backup_count":  basetypes.Int64Type{},
			"max_timestamp_backup_count": basetypes.Int64Type{},
			"storage_local_path":         basetypes.StringType{},
			"storage_type":               basetypes.StringType{},
		},
		map[string]attr.Value{
			"daily_backup_time":          v.DailyBackupTime,
			"interval_in_hours":          v.IntervalInHours,
			"interval_in_mins":           v.IntervalInMins,
			"is_etcd_backup_enabled":     v.IsEtcdBackupEnabled,
			"max_interval_backup_count":  v.MaxIntervalBackupCount,
			"max_timestamp_backup_count": v.MaxTimestampBackupCount,
			"storage_local_path":         v.StorageLocalPath,
			"storage_type":               v.StorageType,
		})

	return objVal, diags
}

func (v EtcdBackupValue) Equal(o attr.Value) bool {
	other, ok := o.(EtcdBackupValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.DailyBackupTime.Equal(other.DailyBackupTime) {
		return false
	}

	if !v.IntervalInHours.Equal(other.IntervalInHours) {
		return false
	}

	if !v.IntervalInMins.Equal(other.IntervalInMins) {
		return false
	}

	if !v.IsEtcdBackupEnabled.Equal(other.IsEtcdBackupEnabled) {
		return false
	}

	if !v.MaxIntervalBackupCount.Equal(other.MaxIntervalBackupCount) {
		return false
	}

	if !v.MaxTimestampBackupCount.Equal(other.MaxTimestampBackupCount) {
		return false
	}

	if !v.StorageLocalPath.Equal(other.StorageLocalPath) {
		return false
	}

	if !v.StorageType.Equal(other.StorageType) {
		return false
	}

	return true
}

func (v EtcdBackupValue) Type(ctx context.Context) attr.Type {
	return EtcdBackupType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v EtcdBackupValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"daily_backup_time":          basetypes.StringType{},
		"interval_in_hours":          basetypes.Int64Type{},
		"interval_in_mins":           basetypes.Int64Type{},
		"is_etcd_backup_enabled":     basetypes.BoolType{},
		"max_interval_backup_count":  basetypes.Int64Type{},
		"max_timestamp_backup_count": basetypes.Int64Type{},
		"storage_local_path":         basetypes.StringType{},
		"storage_type":               basetypes.StringType{},
	}
}
