// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package datasource_kubeconfig

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
)

func KubeconfigDataSourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"authentication_method": schema.StringAttribute{
				Optional:            true,
				Description:         "The authentication method can be one of three types: token, certificate, or password.",
				MarkdownDescription: "The authentication method can be one of three types: token, certificate, or password.",
				Validators: []validator.String{
					stringvalidator.OneOf("token", "password", "certificate"),
				},
			},
			"id": schema.StringAttribute{
				Required:            true,
				Description:         "UUID of the cluster",
				MarkdownDescription: "UUID of the cluster",
			},
			"kubeconfigs": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"client_certificate": schema.StringAttribute{
							Computed:            true,
							Description:         "Path to the client certificate file",
							MarkdownDescription: "Path to the client certificate file",
						},
						"client_key": schema.StringAttribute{
							Computed:            true,
							Description:         "Path to the client key file",
							MarkdownDescription: "Path to the client key file",
						},
						"cluster": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the cluster",
							MarkdownDescription: "Name of the cluster",
						},
						"cluster_ca_certificate": schema.StringAttribute{
							Computed:            true,
							Description:         "Path to the certificate authority file",
							MarkdownDescription: "Path to the certificate authority file",
						},
						"host": schema.StringAttribute{
							Computed:            true,
							Description:         "Kube api server api endpoint",
							MarkdownDescription: "Kube api server api endpoint",
						},
						"insecure": schema.BoolAttribute{
							Computed:            true,
							Description:         "If the server should be accessed without verifying the TLS certificate",
							MarkdownDescription: "If the server should be accessed without verifying the TLS certificate",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the kubeconfig context",
							MarkdownDescription: "Name of the kubeconfig context",
						},
						"token": schema.StringAttribute{
							Computed:            true,
							Sensitive:           true,
							Description:         "Token of your service account",
							MarkdownDescription: "Token of your service account",
						},
						"username": schema.StringAttribute{
							Computed:            true,
							Description:         "Name of the user",
							MarkdownDescription: "Name of the user",
						},
					},
					CustomType: KubeconfigsType{
						ObjectType: types.ObjectType{
							AttrTypes: KubeconfigsValue{}.AttributeTypes(ctx),
						},
					},
				},
				Computed: true,
			},
			"raw": schema.StringAttribute{
				Computed:            true,
				Description:         "Kubeconfig blob",
				MarkdownDescription: "Kubeconfig blob",
			},
		},
	}
}

type KubeconfigModel struct {
	AuthenticationMethod types.String `tfsdk:"authentication_method"`
	Id                   types.String `tfsdk:"id"`
	Kubeconfigs          types.List   `tfsdk:"kubeconfigs"`
	Raw                  types.String `tfsdk:"raw"`
}

var _ basetypes.ObjectTypable = KubeconfigsType{}

type KubeconfigsType struct {
	basetypes.ObjectType
}

func (t KubeconfigsType) Equal(o attr.Type) bool {
	other, ok := o.(KubeconfigsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t KubeconfigsType) String() string {
	return "KubeconfigsType"
}

func (t KubeconfigsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	clientCertificateAttribute, ok := attributes["client_certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_certificate is missing from object`)

		return nil, diags
	}

	clientCertificateVal, ok := clientCertificateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_certificate expected to be basetypes.StringValue, was: %T`, clientCertificateAttribute))
	}

	clientKeyAttribute, ok := attributes["client_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_key is missing from object`)

		return nil, diags
	}

	clientKeyVal, ok := clientKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_key expected to be basetypes.StringValue, was: %T`, clientKeyAttribute))
	}

	clusterAttribute, ok := attributes["cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cluster is missing from object`)

		return nil, diags
	}

	clusterVal, ok := clusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cluster expected to be basetypes.StringValue, was: %T`, clusterAttribute))
	}

	clusterCaCertificateAttribute, ok := attributes["cluster_ca_certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cluster_ca_certificate is missing from object`)

		return nil, diags
	}

	clusterCaCertificateVal, ok := clusterCaCertificateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cluster_ca_certificate expected to be basetypes.StringValue, was: %T`, clusterCaCertificateAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return nil, diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	insecureAttribute, ok := attributes["insecure"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`insecure is missing from object`)

		return nil, diags
	}

	insecureVal, ok := insecureAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`insecure expected to be basetypes.BoolValue, was: %T`, insecureAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return nil, diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return KubeconfigsValue{
		ClientCertificate:    clientCertificateVal,
		ClientKey:            clientKeyVal,
		Cluster:              clusterVal,
		ClusterCaCertificate: clusterCaCertificateVal,
		Host:                 hostVal,
		Insecure:             insecureVal,
		Name:                 nameVal,
		Token:                tokenVal,
		Username:             usernameVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewKubeconfigsValueNull() KubeconfigsValue {
	return KubeconfigsValue{
		state: attr.ValueStateNull,
	}
}

func NewKubeconfigsValueUnknown() KubeconfigsValue {
	return KubeconfigsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewKubeconfigsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (KubeconfigsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing KubeconfigsValue Attribute Value",
				"While creating a KubeconfigsValue value, a missing attribute value was detected. "+
					"A KubeconfigsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("KubeconfigsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid KubeconfigsValue Attribute Type",
				"While creating a KubeconfigsValue value, an invalid attribute value was detected. "+
					"A KubeconfigsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("KubeconfigsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("KubeconfigsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra KubeconfigsValue Attribute Value",
				"While creating a KubeconfigsValue value, an extra attribute value was detected. "+
					"A KubeconfigsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra KubeconfigsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewKubeconfigsValueUnknown(), diags
	}

	clientCertificateAttribute, ok := attributes["client_certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_certificate is missing from object`)

		return NewKubeconfigsValueUnknown(), diags
	}

	clientCertificateVal, ok := clientCertificateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_certificate expected to be basetypes.StringValue, was: %T`, clientCertificateAttribute))
	}

	clientKeyAttribute, ok := attributes["client_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_key is missing from object`)

		return NewKubeconfigsValueUnknown(), diags
	}

	clientKeyVal, ok := clientKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_key expected to be basetypes.StringValue, was: %T`, clientKeyAttribute))
	}

	clusterAttribute, ok := attributes["cluster"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cluster is missing from object`)

		return NewKubeconfigsValueUnknown(), diags
	}

	clusterVal, ok := clusterAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cluster expected to be basetypes.StringValue, was: %T`, clusterAttribute))
	}

	clusterCaCertificateAttribute, ok := attributes["cluster_ca_certificate"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`cluster_ca_certificate is missing from object`)

		return NewKubeconfigsValueUnknown(), diags
	}

	clusterCaCertificateVal, ok := clusterCaCertificateAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`cluster_ca_certificate expected to be basetypes.StringValue, was: %T`, clusterCaCertificateAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return NewKubeconfigsValueUnknown(), diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	insecureAttribute, ok := attributes["insecure"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`insecure is missing from object`)

		return NewKubeconfigsValueUnknown(), diags
	}

	insecureVal, ok := insecureAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`insecure expected to be basetypes.BoolValue, was: %T`, insecureAttribute))
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewKubeconfigsValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewKubeconfigsValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	usernameAttribute, ok := attributes["username"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`username is missing from object`)

		return NewKubeconfigsValueUnknown(), diags
	}

	usernameVal, ok := usernameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`username expected to be basetypes.StringValue, was: %T`, usernameAttribute))
	}

	if diags.HasError() {
		return NewKubeconfigsValueUnknown(), diags
	}

	return KubeconfigsValue{
		ClientCertificate:    clientCertificateVal,
		ClientKey:            clientKeyVal,
		Cluster:              clusterVal,
		ClusterCaCertificate: clusterCaCertificateVal,
		Host:                 hostVal,
		Insecure:             insecureVal,
		Name:                 nameVal,
		Token:                tokenVal,
		Username:             usernameVal,
		state:                attr.ValueStateKnown,
	}, diags
}

func NewKubeconfigsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) KubeconfigsValue {
	object, diags := NewKubeconfigsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewKubeconfigsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t KubeconfigsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewKubeconfigsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewKubeconfigsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewKubeconfigsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewKubeconfigsValueMust(KubeconfigsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t KubeconfigsType) ValueType(ctx context.Context) attr.Value {
	return KubeconfigsValue{}
}

var _ basetypes.ObjectValuable = KubeconfigsValue{}

type KubeconfigsValue struct {
	ClientCertificate    basetypes.StringValue `tfsdk:"client_certificate"`
	ClientKey            basetypes.StringValue `tfsdk:"client_key"`
	Cluster              basetypes.StringValue `tfsdk:"cluster"`
	ClusterCaCertificate basetypes.StringValue `tfsdk:"cluster_ca_certificate"`
	Host                 basetypes.StringValue `tfsdk:"host"`
	Insecure             basetypes.BoolValue   `tfsdk:"insecure"`
	Name                 basetypes.StringValue `tfsdk:"name"`
	Token                basetypes.StringValue `tfsdk:"token"`
	Username             basetypes.StringValue `tfsdk:"username"`
	state                attr.ValueState
}

func (v KubeconfigsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 9)

	var val tftypes.Value
	var err error

	attrTypes["client_certificate"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["cluster"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["cluster_ca_certificate"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["host"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["insecure"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["username"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 9)

		val, err = v.ClientCertificate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_certificate"] = val

		val, err = v.ClientKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_key"] = val

		val, err = v.Cluster.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cluster"] = val

		val, err = v.ClusterCaCertificate.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["cluster_ca_certificate"] = val

		val, err = v.Host.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["host"] = val

		val, err = v.Insecure.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["insecure"] = val

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		val, err = v.Username.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["username"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v KubeconfigsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v KubeconfigsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v KubeconfigsValue) String() string {
	return "KubeconfigsValue"
}

func (v KubeconfigsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	objVal, diags := types.ObjectValue(
		map[string]attr.Type{
			"client_certificate":     basetypes.StringType{},
			"client_key":             basetypes.StringType{},
			"cluster":                basetypes.StringType{},
			"cluster_ca_certificate": basetypes.StringType{},
			"host":                   basetypes.StringType{},
			"insecure":               basetypes.BoolType{},
			"name":                   basetypes.StringType{},
			"token":                  basetypes.StringType{},
			"username":               basetypes.StringType{},
		},
		map[string]attr.Value{
			"client_certificate":     v.ClientCertificate,
			"client_key":             v.ClientKey,
			"cluster":                v.Cluster,
			"cluster_ca_certificate": v.ClusterCaCertificate,
			"host":                   v.Host,
			"insecure":               v.Insecure,
			"name":                   v.Name,
			"token":                  v.Token,
			"username":               v.Username,
		})

	return objVal, diags
}

func (v KubeconfigsValue) Equal(o attr.Value) bool {
	other, ok := o.(KubeconfigsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ClientCertificate.Equal(other.ClientCertificate) {
		return false
	}

	if !v.ClientKey.Equal(other.ClientKey) {
		return false
	}

	if !v.Cluster.Equal(other.Cluster) {
		return false
	}

	if !v.ClusterCaCertificate.Equal(other.ClusterCaCertificate) {
		return false
	}

	if !v.Host.Equal(other.Host) {
		return false
	}

	if !v.Insecure.Equal(other.Insecure) {
		return false
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	if !v.Username.Equal(other.Username) {
		return false
	}

	return true
}

func (v KubeconfigsValue) Type(ctx context.Context) attr.Type {
	return KubeconfigsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v KubeconfigsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"client_certificate":     basetypes.StringType{},
		"client_key":             basetypes.StringType{},
		"cluster":                basetypes.StringType{},
		"cluster_ca_certificate": basetypes.StringType{},
		"host":                   basetypes.StringType{},
		"insecure":               basetypes.BoolType{},
		"name":                   basetypes.StringType{},
		"token":                  basetypes.StringType{},
		"username":               basetypes.StringType{},
	}
}
