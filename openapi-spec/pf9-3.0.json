{
    "openapi": "3.0.1",
    "info": {
        "title": "Platform9 Managed Kubernetes",
        "description": "Rest API documentation",
        "version": "4.0.0"
    },
    "servers": [
        {
            "url": "/qbert"
        }
    ],
    "paths": {
        "/v4/{projectId}/clusters": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Get the list of clusters currently setup in PMK",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/cluster_details"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized to perform this operation",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Creates a cluster using auto deploy or manual mode",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/cluster_details_for_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK, if cluster create request was submitted successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "cluster"
            }
        },
        "/v4/{projectId}/clusters/{clusterId}/upgrade": {
            "post": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Upgrade a cluster, identified by the uuid",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cloud provider account belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of upgrade minor or patch",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "force",
                        "in": "query",
                        "description": "(optional)Forcefully upgrade cluster to version. Default is false.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/cluster_upgrade_body"
                            }
                        }
                    },
                    "required": false
                },
                "responses": {
                    "200": {
                        "description": "OK, if upgrade request is successfully issued",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "upgradeOptions"
            }
        },
        "/v4/{projectId}/externalClusters/discover": {
            "get": {
                "tags": [
                    "ExternalCluster"
                ],
                "summary": "Provides a list of all the external clusters available to be added to management plane",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK, List of external clusters.",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/externalClusters/register": {
            "post": {
                "tags": [
                    "ExternalCluster"
                ],
                "summary": "Registers an external cluster",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/ext_cluster_register_details_for_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK, if cluster create request was submitted successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    },
                    "404": {
                        "description": "Cluster could not be founds",
                        "content": {}
                    },
                    "409": {
                        "description": "Cluster already registered",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "cluster"
            }
        },
        "/v4/{projectId}/externalClusters/{clusterId}/deregister": {
            "post": {
                "tags": [
                    "ExternalCluster"
                ],
                "summary": "Deregister an external cluster",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK, if cluster create request was submitted successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/externalClusters/{clusterId}/deploymentYAML": {
            "get": {
                "tags": [
                    "ExternalCluster"
                ],
                "summary": "Get the deployment YAML for a private external cluster",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK, if cluster create request was submitted successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    },
                    "404": {
                        "description": "Cluster or the cluster agent could not be found",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/clusters/{clusterId}/addons": {
            "delete": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Delete all cluster addons for a PMK cluster as specified by the cluster UUID",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK, if clusteraddons delete request was submitted successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/clusters/{clusterId}/addonversions": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Provides a list of addon version for pf9-kube role on a cluster.",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK, List of addon versions.",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/clusters/supportedRoleVersions": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Provides a list of supported pf9-kube roles for a cluster.",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK, List of supported roles versions.",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/nodes": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "List all the nodes in a project identified by the project UUID",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the node belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/node_details"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/nodes/{nodeId}": {
            "get": {
                "tags": [
                    "Node"
                ],
                "summary": "Get details of a specific node in project, identified by the UUID",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nodeId",
                        "in": "path",
                        "description": "UUID of the node",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the node belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/node_details"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized to perform this operation",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Node"
                ],
                "summary": "Updates the properties of the node specified by the node UUID",
                "description": "Currently, only the cluster property for a node can be modified and its primary usage is to detach a node from a cluster. The node, if needed, can be reattached to another cluster by using the cluster’s attach API",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nodeId",
                        "in": "path",
                        "description": "UUID of the node",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the nodes belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/cluster_uuid_detail"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK, if the node gets deattached from the cluster",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "cluster"
            }
        },
        "/v4/{projectId}/cloudProviders": {
            "get": {
                "tags": [
                    "Cloud Provider"
                ],
                "summary": "Get the list of the cloud provider accounts currently setup in a project identified by project UUID",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cloud provider belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/cloudprovider"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized to perform this operation",
                        "content": {}
                    }
                }
            },
            "post": {
                "tags": [
                    "Cloud Provider"
                ],
                "summary": "Add a cloud provider account",
                "description": "Note that by default, there is one “local” cloud provider, which is used for building clusters manually. Currently, AWS is the only supported cloudProvider, other than the “local” provider.",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cloud provider account belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/cloudprovider_for_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK, if the cloud provider gets created successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "Cloud provider"
            }
        },
        "/v4/{projectId}/cloudProvider/types": {
            "get": {
                "tags": [
                    "Cloud Provider"
                ],
                "summary": "Get all available cloud provider types, in a project identified by project UUID",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cloud provider belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/type_details"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/cloudProviders/{cloudProviderId}": {
            "get": {
                "tags": [
                    "Cloud Provider"
                ],
                "summary": "Get the details for cloud provider account identified by the account_uuid",
                "description": "This is applicable only for public cloud providers",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cloudProviderId",
                        "in": "path",
                        "description": "UUID of the cloud provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cloud provider belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/provider_details"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized to perform this operation",
                        "content": {}
                    }
                }
            },
            "delete": {
                "tags": [
                    "Cloud Provider"
                ],
                "summary": "Delete a cloud provider account specified by account uuid",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cloudProviderId",
                        "in": "path",
                        "description": "UUID of the cloud provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cloud provider account belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK, if the cloud provider gets deleted successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/cloudProviders/{cloudProviderId}/region/{regionid}": {
            "get": {
                "tags": [
                    "Cloud Provider"
                ],
                "summary": "Get the details for a region in a particular cloud provider account identified by the account_uuid",
                "description": "This is applicable only for public cloud providers",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cloudProviderId",
                        "in": "path",
                        "description": "UUID of the cloud provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "regionid",
                        "in": "path",
                        "description": "Name of the region",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cloud provider belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/region_details"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/cloudProviders/{cloudProviderId}/region/{regionid}/sshKey": {
            "post": {
                "tags": [
                    "Cloud Provider"
                ],
                "summary": "Add ssh key to a cloud provider region",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cloudProviderId",
                        "in": "path",
                        "description": "UUID of the cloud provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "regionid",
                        "in": "path",
                        "description": "Name of the region",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cloud provider belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/key_details"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {}
                    },
                    "400": {
                        "description": "Key is not in valid OpenSSH public key format",
                        "content": {}
                    },
                    "403": {
                        "description": "unauthorized to perform this operation",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "key"
            }
        },
        "/v4/{projectId}/clusters/{clusterId}": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Get details of a cluster",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/cluster_details"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized to perform this operation",
                        "content": {}
                    }
                }
            },
            "put": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Update the properties of a cluster specified by the clusterId",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/cluster_details_for_put"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK, if cluster upgrade request was submitted successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "cluster"
            },
            "delete": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Delete a cluster from PMK as specified by the cluster UUID",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK, if cluster delete request was submitted successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/clusters/{clusterId}/nodes": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Get nodes of a cluster",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/node_details"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/kubeconfig/{clusterId}": {
            "get": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Get the kubeconfig blob for the specific cluster",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "force_cert_auth",
                        "in": "query",
                        "description": "If true, generates certificate based kubeconfig. Default is false.",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response is a blob sent with the Content-Type ‘application/octet-stream’",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/nodePools": {
            "get": {
                "tags": [
                    "Node pool"
                ],
                "summary": "Get details of all node pools",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the node pool belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/nodepool"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/webcli/{clusterId}": {
            "post": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Generate token to be used by web cli",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/webcli_token"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/clusters/{clusterId}/attach": {
            "post": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Attach nodes to a cluster. In a manual deployed cluster, nodes can be added to a cluster using this API. If the cluster has no masters, multiple masters can be attached simultaneously.",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/attach_nodes_array"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK, if the node get attached to the cluster",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "nodes"
            }
        },
        "/v4/{projectId}/clusters/{clusterId}/detach": {
            "post": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Detach nodes from a cluster. In a manual deployed cluster, nodes can be removed from a cluster using this API.",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/detach_nodes_array"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK, if the node get attached to the cluster",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "nodes"
            }
        },
        "/v4/{projectId}/cloudProviders/validate": {
            "post": {
                "tags": [
                    "Cloud Provider"
                ],
                "summary": "Validate a cloud provider account",
                "description": "Validate a cloud provider credentials before adding it",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cloud provider account belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/cloudprovider_for_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK, if the cloud provider gets created successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "Cloud provider"
            }
        },
        "/v4/cloudProviders/{cloudProviderId}": {
            "put": {
                "tags": [
                    "Cloud Provider"
                ],
                "summary": "Update a cloud provider account specified by account uuid",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "cloudProviderId",
                        "in": "path",
                        "description": "UUID of the cloud provider",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "*/*": {
                            "schema": {
                                "$ref": "#/components/schemas/cloudprovider_for_put"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK, if the cloud provider gets upddated successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                },
                "x-codegen-request-body-name": "Cloud provider"
            }
        },
        "/v4/{projectId}/clusters/{clusterId}/suppotedaddonversions": {
            "delete": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Get all supported cluster addon versions for a PMK cluster as specified by the cluster UUID",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK, if supported addon versions are fetched successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        },
        "/v4/{projectId}/clusters/{clusterId}/supportedaddonoperatorversions": {
            "delete": {
                "tags": [
                    "Cluster"
                ],
                "summary": "Get all supported addon-operator tags for a PMK cluster as specified by the cluster UUID",
                "parameters": [
                    {
                        "name": "X-Auth-Token",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "clusterId",
                        "in": "path",
                        "description": "UUID of the cluster",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "projectId",
                        "in": "path",
                        "description": "UUID of the project the cluster belongs to",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK, if supported addon-operator versions are fetched successfully",
                        "content": {}
                    },
                    "403": {
                        "description": "Unauthorized to perform this operation",
                        "content": {}
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "ext_cluster_deregister_details_for_post": {
                "type": "object",
                "properties": {
                    "clusterID": {
                        "type": "string",
                        "description": "Cluster UUID to delete"
                    }
                }
            },
            "ext_cluster_register_details_for_post": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "An unique cluster idenfier"
                    },
                    "provider": {
                        "type": "string",
                        "description": "Name of the external K8S cluster provider service"
                    },
                    "cloudProviderID": {
                        "type": "string",
                        "description": "UUID of a cloud provider in PF9"
                    },
                    "providerDetails": {
                        "type": "object",
                        "properties": {},
                        "description": "A dynamic field to include cloud specific parameters. For example, for EKS, we need the region to be able to register a cluster"
                    }
                }
            },
            "cluster_details_for_post": {
                "required": [
                    "containersCidr",
                    "kubeRoleVersion",
                    "networkPlugin",
                    "servicesCidr"
                ],
                "type": "object",
                "properties": {
                    "allowWorkloadsOnMaster": {
                        "type": "integer",
                        "description": "Field is set to 1 if the master nodes can run non-critical workloads"
                    },
                    "ami": {
                        "type": "string",
                        "description": "AMI ID used to provision cluster nodes"
                    },
                    "appCatalogEnabled": {
                        "type": "integer",
                        "description": "DEPRECATED. Always disabled now. Field is set to 1 if app catalog is enabled, 0 otherwise, applicable also for manual deploy"
                    },
                    "azs": {
                        "type": "array",
                        "description": "Availability zone(s) the cluster is deployed in",
                        "items": {
                            "type": "string"
                        }
                    },
                    "calicoV4BlockSize": {
                        "type": "string",
                        "description": "Subnet size per node for the Calico network, in CIDR notation (e.g. 26)"
                    },
                    "calicoIpIpMode": {
                        "type": "string",
                        "description": "IP-IP encapsulation mode for Calico network. Choose: Always, Never, CrossSubnet"
                    },
                    "calicoNatOutgoing": {
                        "type": "boolean",
                        "description": "Field is set to true if Calico nodes need to NAT north-south egress traffic."
                    },
                    "calicoNodeCpuLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_NODE_CPU_LIMIT environment variable in Calico."
                    },
                    "calicoNodeMemoryLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_NODE_MEMORY_LIMIT environment variable in Calico."
                    },
                    "calicoTyphaCpuLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_TYPHA_CPU_LIMIT environment variable in Calico."
                    },
                    "calicoTyphaMemoryLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_TYPHA_MEMORY_LIMIT environment variable in Calico."
                    },
                    "calicoControllerCpuLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_CONTROLLER_CPU_LIMIT environment variable in Calico."
                    },
                    "calicoControllerMemoryLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_CONTROLLER_MEMORY_LIMIT environment variable in Calico."
                    },
                    "containersCidr": {
                        "type": "string",
                        "description": "CIDR used for container IP addresses, applicable also for manual deploy"
                    },
                    "dockerLiveRestoreEnabled": {
                        "type": "boolean",
                        "description": "Enables the use of Docker live restore as described here: https://docs.docker.com/config/containers/live-restore/"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "Domain used for cluster FQDNs"
                    },
                    "enableMetallb": {
                        "type": "boolean",
                        "description": "If true, install MetalLB to support the loadbalancer service-type"
                    },
                    "enableCAS": {
                        "type": "boolean",
                        "description": "If true, cluster autoscaling is enabled (only for AWS clusters)."
                    },
                    "etcdBackup": {
                        "$ref": "#/components/schemas/etcd_backup"
                    },
                    "externalDnsName": {
                        "type": "string",
                        "description": "Optional DNS name for API endpoint. This field is autogenerated when usePf9Domain is set, also applicable for manual deploy"
                    },
                    "httpProxy": {
                        "type": "string",
                        "description": "The http proxy used for node communications. This parameter is required when internalElb is set to true and the private subnet selected does not route IP packets to the internet through a VPN"
                    },
                    "internalElb": {
                        "type": "boolean",
                        "description": "Set to true if load balancer is an internal load balancer or false for an Internet-facing load balancer. More information here: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-internal-load-balancers.html. Setting this parameter to true requires that isPrivate is set to true. If the private subnet selected is not configured to route IP packets through a VPN, then an httpProxy is required for node communications to work"
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "Set to true if nodes are deployed using public subnet, false otherwise, applicable also for manual deploy. This parameter is required if internalElb is set to true."
                    },
                    "k8sApiPort": {
                        "type": "string",
                        "description": "Port on which K8S API Server will listen, 443 by default"
                    },
                    "masterFlavor": {
                        "type": "string",
                        "description": "Node flavor used for master node"
                    },
                    "masterVipIpv4": {
                        "type": "string",
                        "description": "API server Virtual IP that provides failover. When specified, deploy keepalived setup to cluster master nodes together"
                    },
                    "masterVipIface": {
                        "type": "string",
                        "description": "If masterVipIpv4 is specified, this field is required. Specify the interface that the VIP attaches to"
                    },
                    "metallbCidr": {
                        "type": "string",
                        "description": "If enableMetallb is true, specify the comma-separated pools of IPs that MetalLB will manage (for example: A.B.C.D-E.F.G.H, I.J.K.L-M.N.O.P)"
                    },
                    "mtuSize": {
                        "type": "string",
                        "description": "MTU for container network interfaces. Optional and used for the Calico network backend"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster, applicable also for manual deploy"
                    },
                    "networkPlugin": {
                        "type": "string",
                        "description": "Network backend to use for container networking. Defaults to flannel. Supported choices are flannel, calico, noop, weave"
                    },
                    "nodePoolUuid": {
                        "type": "string",
                        "description": "UUID of the node pool used for the cluster, applicable also for manual deploy"
                    },
                    "numMasters": {
                        "type": "integer",
                        "description": "Number of master nodes in the cluster"
                    },
                    "numWorkers": {
                        "type": "integer",
                        "description": "Number of worker nodes in the cluster"
                    },
                    "numMinWorkers": {
                        "type": "integer",
                        "description": "This parameter is required if enableCAS is set to true. This is the minimum number of worker nodes in ASG"
                    },
                    "numMaxWorkers": {
                        "type": "integer",
                        "description": "This parameter is required if enableCAS is set to true. This is the maximum number of worker nodes in ASG"
                    },
                    "privateSubnets": {
                        "type": "array",
                        "description": "The private subnet ID to which the cluster is deployed. This parameter is optional if vpc (VPC ID) is set. This parameter is required if vpc (VPC ID) is set and isPrivate is set to true. This parameter is ignored if vpc (VPC ID) is not set",
                        "items": {
                            "type": "string"
                        }
                    },
                    "privileged": {
                        "type": "boolean",
                        "description": "Field is set to 1 if cluster runs privileged containers, 0 otherwise"
                    },
                    "region": {
                        "type": "string",
                        "description": "Cloud provider region in which the cluster was created"
                    },
                    "runtimeConfig": {
                        "type": "string",
                        "description": "Applicable also for manual deploy"
                    },
                    "serviceFqdn": {
                        "type": "string",
                        "description": "FQDN used to reference cluster services"
                    },
                    "servicesCidr": {
                        "type": "string",
                        "description": "CIDR used for service IP addresses, applicable also for manual deploy"
                    },
                    "sshKey": {
                        "type": "string",
                        "description": "Public SSH key associated with the cluster nodes"
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "The public subnet ID to which the cluster is deployed. This parameter is required if vpc (VPC ID) is set and isPrivate is set to false (Public topology). This parameter is required if vpc (VPC ID) is set and isPrivate is set to true (Private topology). This parameter is optional if vpc (VPC ID) is set and isPrivate is set to true and internalElb is set to true (VPN topology). This parameter is ignored if vpc (VPC ID) is not set"
                        }
                    },
                    "tags": {
                        "type": "object",
                        "properties": {},
                        "description": "User defined key-value pairs represented as a JSON object"
                    },
                    "usePf9Domain": {
                        "type": "boolean",
                        "description": "Set to true if platform9.net domain is used, false otherwise"
                    },
                    "vpc": {
                        "type": "string",
                        "description": "If set, creates cluster using this VPC ID. Otherwise, the cluster is deployed on a new VPC. This parameter is required if internalElb is set to true"
                    },
                    "workerFlavor": {
                        "type": "string",
                        "description": "Node flavor used for worker node"
                    },
                    "kubeRoleVersion": {
                        "type": "string",
                        "description": "Pf9-kube role version to be used when bringing up the cluster."
                    },
                    "cpuManagerPolicy": {
                        "type": "string",
                        "description": "options: none, static; default: none"
                    },
                    "topologyManagerPolicy": {
                        "type": "string",
                        "description": "options: none, best-effort, restricted, single-numa-node; default: none"
                    },
                    "reservedCPUs": {
                        "type": "string",
                        "description": "list of CPUs to be reserved for the system. Ex: 1-3,5"
                    },
                    "dockerPrivateRegistry": {
                        "type": "string",
                        "description": "(optional) URL of private Docker registry to fetch Platform9 images from"
                    },
                    "quayPrivateRegistry": {
                        "type": "string",
                        "description": "(optional) URL of private Quay registry to fetch Platform9 images from"
                    },
                    "gcrPrivateRegistry": {
                        "type": "string",
                        "description": "(optional) URL of private GCR registry to fetch Platform9 images from"
                    },
                    "k8sPrivateRegistry": {
                        "type": "string",
                        "description": "(optional) URL of private K8S registry to fetch Platform9 images from"
                    },
                    "useHostname": {
                        "type": "boolean",
                        "description": "(optional) If set to true nodes will be registered in the cluster using hostname instead of IP address. This option is only applicable to IPv4 hosts. This option is ignored when deploying clusters on IPv6 enabled hosts and public clouds - AWS, Azure, etc."
                    },
                    "enableProfileAgent": {
                        "type": "boolean",
                        "description": "(optional) If set to true platform9 profile engine agent will be deployed on the cluster. This agent is required to be able to use profiles."
                    },
                    "enableCatapultMonitoring": {
                        "type": "boolean",
                        "description": "(optional) If set to true (default value) platform9 Catapult monitoring will be deployed on the cluster"
                    },
                    "dockerCentosPackageRepoUrl": {
                        "type": "string",
                        "description": "(optional) URL of the centos repo to be used for docker installation, this URL is added as a first mirror optiopn"
                    },
                    "dockerUbuntuPackageRepoUrl": {
                        "type": "string",
                        "description": "(optional) URL of the ubuntu repo to be used for docker installation, this URL is added as a first mirror option"
                    },
                    "containerRuntime": {
                        "type": "string",
                        "description": "(optional) Container runtime for this cluster. Valid values: [docker, containerd]"
                    },
                    "certExpiryHrs": {
                        "type": "integer",
                        "description": "(optional) Number of hours before user certificates in kubeconfig expires, should be greater than 0 if set. Default is 24hrs."
                    },
                    "addonOperatorImageTag": {
                        "type": "string",
                        "description": "(optional) addon operator image tag for this cluster."
                    },
                    "addonVersions": {
                        "type": "object",
                        "properties": {
                            "coredns": {
                                "type": "string",
                                "description": "coredns version"
                            },
                            "dashboard": {
                                "type": "string",
                                "description": "dashboard version"
                            },
                            "dns-autoscaler": {
                                "type": "string",
                                "description": "dns-autoscaler version"
                            },
                            "kubevirt": {
                                "type": "string",
                                "description": "kubevirt version"
                            },
                            "luigi": {
                                "type": "string",
                                "description": "luigi version"
                            },
                            "metal3": {
                                "type": "string",
                                "description": "metal3 version"
                            },
                            "metallb": {
                                "type": "string",
                                "description": "metallb version"
                            },
                            "metricsserver": {
                                "type": "string",
                                "description": "metricsserver version"
                            },
                            "monitoring": {
                                "type": "string",
                                "description": "monitoring version"
                            },
                            "profileagent": {
                                "type": "string",
                                "description": "profileagent version"
                            },
                            "cluster-autoscaler-aws": {
                                "type": "string",
                                "description": "cluster-autoscaler-aws version"
                            },
                            "cluster-autoscaler-azure": {
                                "type": "string",
                                "description": "cluster-autoscaler-azure version"
                            }
                        }
                    }
                }
            },
            "etcd_backup": {
                "type": "object",
                "properties": {
                    "isEtcdBackupEnabled": {
                        "type": "boolean",
                        "description": "Set to true if etcd backup should be enabled, false otherwise"
                    },
                    "intervalInMins": {
                        "type": "integer",
                        "description": "etcd backup interval, specified in minutes. intervalInMins and intervalInHours are mutually exclusive"
                    },
                    "intervalInHours": {
                        "type": "integer",
                        "description": "etcd backup interval, specified in Hours. intervalInMins and intervalInHours are mutually exclusive"
                    },
                    "dailyBackupTime": {
                        "type": "string",
                        "description": "etcd backup Timestamp for daily backup, specified in format 'HH:MM' "
                    },
                    "maxIntervalBackupCount": {
                        "type": "integer",
                        "description": "max number of Backups retention for interval type backups, required if intervalInMins or intervalInHours is provided"
                    },
                    "maxTimestampBackupCount": {
                        "type": "integer",
                        "description": "max number of Backups retention for Timestamp type backups, required if dailyBackupTime is provided"
                    },
                    "storageType": {
                        "type": "string",
                        "description": "Storage type for the etcd backup. Only 'local' is current supported type. 'local' saves backup to the node's local disk"
                    },
                    "storageProperties": {
                        "$ref": "#/components/schemas/etcdbackup_storageproperties"
                    }
                }
            },
            "etcdbackup_storageproperties": {
                "type": "object",
                "properties": {
                    "localPath": {
                        "type": "string",
                        "description": "Path on the local filesystem where the etcd backup should be stored. For 'local' storage type only."
                    }
                }
            },
            "cluster_upgrade_body": {
                "type": "object",
                "properties": {
                    "batchUpgradePercent": {
                        "type": "number",
                        "description": "Number between 1-100 which represents the percent of worker nodes to upgrade in parallel at once during an upgrade"
                    },
                    "batchUpgradeNodes": {
                        "type": "array",
                        "description": "List of worker nodes uuids to upgrade in parallel at once during an upgrade",
                        "items": {
                            "type": "string"
                        }
                    },
                    "containerRuntime": {
                        "type": "string",
                        "description": "(optional) Container runtime for this cluster. Valid values: [docker, containerd]"
                    },
                    "addonOperatorImageTag": {
                        "type": "string",
                        "description": "(optional) addon operator image tag for this cluster."
                    },
                    "addonVersions": {
                        "type": "object",
                        "properties": {
                            "coredns": {
                                "type": "string",
                                "description": "coredns version"
                            },
                            "dashboard": {
                                "type": "string",
                                "description": "dashboard version"
                            },
                            "dns-autoscaler": {
                                "type": "string",
                                "description": "dns-autoscaler version"
                            },
                            "kubevirt": {
                                "type": "string",
                                "description": "kubevirt version"
                            },
                            "luigi": {
                                "type": "string",
                                "description": "luigi version"
                            },
                            "metal3": {
                                "type": "string",
                                "description": "metal3 version"
                            },
                            "metallb": {
                                "type": "string",
                                "description": "metallb version"
                            },
                            "metricsserver": {
                                "type": "string",
                                "description": "metricsserver version"
                            },
                            "monitoring": {
                                "type": "string",
                                "description": "monitoring version"
                            },
                            "profileagent": {
                                "type": "string",
                                "description": "profileagent version"
                            },
                            "cluster-autoscaler-aws": {
                                "type": "string",
                                "description": "cluster-autoscaler-aws version"
                            },
                            "cluster-autoscaler-azure": {
                                "type": "string",
                                "description": "cluster-autoscaler-azure version"
                            }
                        }
                    }
                }
            },
            "node_details": {
                "type": "object",
                "properties": {
                    "cloudProviderType": {
                        "type": "string",
                        "description": "Type of cloud provider, such as local or aws used to create the cluster"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "Name of the cluster the node belongs to"
                    },
                    "clusterUuid": {
                        "type": "string",
                        "description": "UUID of the cluster the node belongs to"
                    },
                    "name": {
                        "type": "string",
                        "description": "Host name of the node"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "UUID of the node"
                    },
                    "api_responding": {
                        "type": "integer",
                        "description": "1 indicates the API server on this node is running. 0 otherwise. Applicable only if isMaster is 1"
                    },
                    "primaryIp": {
                        "type": "string",
                        "description": "IP address of the node"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the node. States include “ok”, ”converging”, “failed”. These states indicate the current state of kubernetes setup on the host."
                    },
                    "isMaster": {
                        "type": "integer",
                        "description": "1 if this node is a master of a custer. 0 otherwise."
                    },
                    "nodePoolName": {
                        "type": "string",
                        "description": "Name of the node pool, the node belongs to"
                    },
                    "nodePoolUuid": {
                        "type": "string",
                        "description": "UUID of the node pool, the node belongs to"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the project the node belongs to"
                    }
                }
            },
            "region": {
                "type": "object",
                "properties": {
                    "Endpoint": {
                        "type": "string",
                        "description": "endpoint of the region"
                    },
                    "RegionName": {
                        "type": "string",
                        "description": "name of the region"
                    }
                }
            },
            "provider_details": {
                "type": "object",
                "properties": {
                    "Regions": {
                        "type": "array",
                        "description": "Regions belonging to the provider",
                        "items": {
                            "$ref": "#/components/schemas/region"
                        }
                    }
                }
            },
            "type_details": {
                "type": "object",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Cloud provider type. Examples are 'aws','local'"
                    }
                }
            },
            "region_details": {
                "type": "object",
                "properties": {
                    "azs": {
                        "type": "array",
                        "description": "The list of availability zones in the region",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "domains": {
                        "type": "array",
                        "description": "The list of hosting domains",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "flavors": {
                        "type": "array",
                        "description": "The list of instance flavors supported in the region",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "keyPairs": {
                        "type": "array",
                        "description": "The list of ssh key pairs in the region",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "operatingSystems": {
                        "type": "array",
                        "description": "The list of operating systems available in the region",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    },
                    "vpcs": {
                        "type": "array",
                        "description": "The list of virtual private networks available in the region",
                        "items": {
                            "type": "object",
                            "properties": {}
                        }
                    }
                }
            },
            "key_details": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the key"
                    },
                    "key": {
                        "type": "string",
                        "description": "Contents of the key"
                    }
                }
            },
            "cluster_details": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "UUID of the cluster"
                    },
                    "containersCidr": {
                        "type": "string",
                        "description": "CIDR used for container IP addresses"
                    },
                    "servicesCidr": {
                        "type": "string",
                        "description": "CIDR used for service IP addresses"
                    },
                    "isKubernetes": {
                        "type": "integer",
                        "description": "Field is set to 1 if the cluster is a Kubernetes cluster, 0 otherwise"
                    },
                    "externalDnsName": {
                        "type": "string",
                        "description": "Optional DNS name for API endpoint. This field is autogenerated when pf9 domain is used."
                    },
                    "masterIp": {
                        "type": "string",
                        "description": "Ip of the master node, applicable only for cloud provider type 'openstack'"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the cluster"
                    },
                    "masterStatus": {
                        "type": "string",
                        "description": "Status of the master nodes. 'healthy' means all masters are healthy. 'partially healthy' means quorum number of masters are healthy, but some are not. 'unhealthy' means quorum number of master are unhealthy"
                    },
                    "workerStatus": {
                        "type": "string",
                        "description": "Status of the worker nodes. 'healthy' means all workers are healthy. 'partially healthy' means more than 50% of the workers are healthy, rest are unhealthy. 'unhealthy' means more than 50% of the workers are unhealthy"
                    },
                    "flannelIfaceLabel": {
                        "type": "string",
                        "description": "The interface used by flannel for interhost communication"
                    },
                    "flannelPublicIfaceLabel": {
                        "type": "string",
                        "description": "The IP address used as the flannel public IP for the nodes in the cluster"
                    },
                    "dockerRoot": {
                        "type": "string",
                        "description": "Root directory for docker"
                    },
                    "etcdDataDir": {
                        "type": "string",
                        "description": "Data directory for etcd. The field is applicable to master nodes only"
                    },
                    "lastOp": {
                        "type": "string",
                        "description": "The last operation such as node attach or node detach that was performed on the cluster"
                    },
                    "lastOk": {
                        "type": "string",
                        "description": "The timestamp when the cluster last reported an OK status"
                    },
                    "keystoneEnabled": {
                        "type": "integer",
                        "description": "Field is set to 1 if keystone is enabled, 0 otherwise"
                    },
                    "authzEnabled": {
                        "type": "integer",
                        "description": "Field is set to 1 if authz is enabled, 0 otherwise"
                    },
                    "taskStatus": {
                        "type": "string",
                        "description": "Status of the last task that run on the cluster."
                    },
                    "taskError": {
                        "type": "string",
                        "description": "Error details if the last task on cluster did not succeed"
                    },
                    "numMasters": {
                        "type": "integer",
                        "description": "Number of master nodes in the cluster"
                    },
                    "numWorkers": {
                        "type": "integer",
                        "description": "Number of worker nodes in the cluster"
                    },
                    "privileged": {
                        "type": "integer",
                        "description": "Field is set to 1 if cluster runs privileged containers, 0 otherwise"
                    },
                    "appCatalogEnabled": {
                        "type": "integer",
                        "description": "DEPRECATED. Field doesn't lead to any action on the cluster now. Field is set to 1 if app catalog is enabled, 0 otherwise"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "UUID of the Keystone project that this cluster is part of"
                    },
                    "runtimeConfig": {
                        "type": "string",
                        "description": ""
                    },
                    "etcdBackup": {
                        "$ref": "#/components/schemas/etcd_backup_for_get"
                    },
                    "nodePoolUuid": {
                        "type": "string",
                        "description": "UUID of the node pool used for the cluster"
                    },
                    "nodePoolName": {
                        "type": "string",
                        "description": "Name of the node pool used for the cluster"
                    },
                    "cloudProviderUuid": {
                        "type": "string",
                        "description": "UUID of the cloud provider used to create this cluster"
                    },
                    "cloudProviderName": {
                        "type": "string",
                        "description": "Name of the cloud provider used to create this cluster"
                    },
                    "cloudProviderType": {
                        "type": "string",
                        "description": "Type of the cloud provider used to create this cluster"
                    },
                    "cloudProperties": {
                        "$ref": "#/components/schemas/cloud_properties"
                    },
                    "canUpgrade": {
                        "type": "boolean",
                        "description": "Field is set to true if the cluster can be upgraded, false otherwise"
                    },
                    "networkPlugin": {
                        "type": "string",
                        "description": "Network backend to use for container networking. Defaults to flannel. Supported choices are flannel, calico, noop, weave"
                    },
                    "allowWorkloadsOnMaster": {
                        "type": "integer",
                        "description": "Field is set to 1 if the master nodes can run non-critical workloads"
                    },
                    "tags": {
                        "type": "object",
                        "properties": {},
                        "description": "User defined key-value pairs represented as a JSON object"
                    },
                    "k8sApiPort": {
                        "type": "string",
                        "description": "Port on which K8S API Server will listen, 443 by default"
                    },
                    "masterVipIpv4": {
                        "type": "string",
                        "description": "API server Virtual IP that provides failover if specified for the cluster. Defaults to empty string"
                    },
                    "masterVipIface": {
                        "type": "string",
                        "description": "The interface that VIP attaches to if specified. Defaults to empty string"
                    },
                    "enableMetallb": {
                        "type": "boolean",
                        "description": "1 if metallb enabled. Defaults to 0"
                    },
                    "metallbCidr": {
                        "type": "string",
                        "description": "Comma separated pools of IPs like A.B.C.D-E.F.G.H, I.J.K.L-M.N.O.P that metallb will manage if specified"
                    },
                    "masterVipVrouterId": {
                        "type": "string",
                        "description": "Virtual router id choosen for the cluster. Range: 0-254. Emptry string if masterVipIpv4 not specified"
                    },
                    "calicoV4BlockSize": {
                        "type": "string",
                        "description": "Subnet size per node for the Calico network, in CIDR notation (e.g. 26)"
                    },
                    "calicoIpIpMode": {
                        "type": "string",
                        "description": "IP-IP encapsulation mode for Calico network. Choose: Always, Never, CrossSubnet"
                    },
                    "calicoNatOutgoing": {
                        "type": "boolean",
                        "description": "Field is set to true if Calico nodes need to NAT north-south egress traffic."
                    },
                    "calicoNodeCpuLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_NODE_CPU_LIMIT environment variable in Calico."
                    },
                    "calicoNodeMemoryLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_NODE_MEMORY_LIMIT environment variable in Calico."
                    },
                    "calicoTyphaCpuLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_TYPHA_CPU_LIMIT environment variable in Calico."
                    },
                    "calicoTyphaMemoryLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_TYPHA_MEMORY_LIMIT environment variable in Calico."
                    },
                    "calicoControllerCpuLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_CONTROLLER_CPU_LIMIT environment variable in Calico."
                    },
                    "calicoControllerMemoryLimit": {
                        "type": "string",
                        "description": "Corresponds to the CALICO_CONTROLLER_MEMORY_LIMIT environment variable in Calico."
                    },
                    "mtuSize": {
                        "type": "string",
                        "description": "MTU for container network interfaces. Optional and used for the Calico network backend"
                    },
                    "cpuManagerPolicy": {
                        "type": "string",
                        "description": "options: none, static; default: none"
                    },
                    "topologyManagerPolicy": {
                        "type": "string",
                        "description": "options: none, best-effort, restricted, single-numa-node; default: none"
                    },
                    "reservedCPUs": {
                        "type": "string",
                        "description": "list of CPUs to be reserved for the system. Ex: 1-3,5"
                    },
                    "dockerPrivateRegistry": {
                        "type": "string",
                        "description": "(optional) URL of private Docker registry to fetch Platform9 images from"
                    },
                    "quayPrivateRegistry": {
                        "type": "string",
                        "description": "(optional) URL of private Quay registry to fetch Platform9 images from"
                    },
                    "gcrPrivateRegistry": {
                        "type": "string",
                        "description": "(optional) URL of private GCR registry to fetch Platform9 images from"
                    },
                    "k8sPrivateRegistry": {
                        "type": "string",
                        "description": "(optional) URL of private K8S registry to fetch Platform9 images from"
                    },
                    "useHostname": {
                        "type": "boolean",
                        "description": "(optioanl) If set to true nodes will be registered in the cluster using hostname instead of IP address. This option is only applicable to IPv4 hosts. This option is ignored when deploying clusters on IPv6 enabled hosts and public clouds - AWS, Azure, etc."
                    },
                    "enableProfileAgent": {
                        "type": "boolean",
                        "description": "(optional) If set to true platform9 profile engine agent will be deployed on the cluster. This agent is required to be able to use profiles."
                    },
                    "dockerCentosPackageRepoUrl": {
                        "type": "string",
                        "description": "(optional) URL of the centos repo to be used for docker installation"
                    },
                    "dockerUbuntuPackageRepoUrl": {
                        "type": "string",
                        "description": "(optional) URL of the ubuntu repo to be used for docker installation"
                    },
                    "containerRuntime": {
                        "type": "string",
                        "description": "(optional) Container runtime for this cluster. Valid values: [docker, containerd]"
                    },
                    "certExpiryHrs": {
                        "type": "integer",
                        "description": "(optional) Number of hours before user certificates in kubeconfig expires, should be greater than 0 if set. Default is 24hrs."
                    },
                    "addonOperatorImageTag": {
                        "type": "string",
                        "description": "(optional) addon operator image tag for this cluster."
                    },
                    "enableEtcdEncryption": {
                        "type": "string",
                        "description": "States whether tls encryption is enabled on etcd, Default:false"
                    }
                }
            },
            "cluster_details_for_put": {
                "type": "object",
                "properties": {
                    "numWorkers": {
                        "type": "integer",
                        "description": "Number of worker nodes in the cluster. For AWS cluster, this parameter is relevant only if cluster autoscaling is disabled"
                    },
                    "numMinWorkers": {
                        "type": "integer",
                        "description": "Minimum number of worker nodes in ASG for AWS cluster. This parameter is relevant only if cluster autoscaling is enabled"
                    },
                    "numMaxWorkers": {
                        "type": "integer",
                        "description": "Maximum number of worker nodes in ASG for AWS cluster. This parameter is relevant only if cluster autoscaling is enabled"
                    },
                    "etcdBackup": {
                        "$ref": "#/components/schemas/etcd_backup"
                    },
                    "tags": {
                        "type": "object",
                        "properties": {},
                        "description": "User defined key-value pairs represented as a JSON object"
                    },
                    "customAmi": {
                        "type": "string",
                        "description": "The custom ami name which can be specified by a user"
                    },
                    "enableProfileAgent": {
                        "type": "boolean",
                        "description": "(optional) If set to true platform9 profile engine agent will be deployed on the cluster. This agent is required to be able to use profiles."
                    },
                    "dockerCentosPackageRepoUrl": {
                        "type": "string",
                        "description": "(optional) URL of the centos repo to be used for docker installation"
                    },
                    "dockerUbuntuPackageRepoUrl": {
                        "type": "string",
                        "description": "(optional) URL of the ubuntu repo to be used for docker installation"
                    },
                    "certExpiryHrs": {
                        "type": "integer",
                        "description": "(optional) Number of hours before user certificates in kubeconfig expires, should be greater than 0 if set. Default is 24hrs."
                    },
                    "addonOperatorImageTag": {
                        "type": "string",
                        "description": "(optional) addon operator image tag for this cluster."
                    }
                }
            },
            "cloud_properties": {
                "type": "object",
                "properties": {
                    "region": {
                        "type": "string",
                        "description": "Cloud provider region in which the cluster was created"
                    },
                    "masterFlavor": {
                        "type": "string",
                        "description": "Node flavor used for master node"
                    },
                    "workerFlavor": {
                        "type": "string",
                        "description": "Node flavor used for worker node"
                    },
                    "sshKey": {
                        "type": "string",
                        "description": "Public SSH key associated with the cluster nodes"
                    },
                    "serviceFqdn": {
                        "type": "string",
                        "description": "FQDN used to reference cluster services"
                    },
                    "ami": {
                        "type": "string",
                        "description": "AMI ID used to provision cluster nodes"
                    },
                    "domainId": {
                        "type": "string",
                        "description": "Domain used for cluster FQDNs"
                    },
                    "isPrivate": {
                        "type": "boolean",
                        "description": "Set to true if nodes are deployed using public subnet, false otherwise, applicable also for manual deploy. This parameter is required if internalElb is set to true."
                    },
                    "usePf9Domain": {
                        "type": "string",
                        "description": "Set to true if platform9.net domain is used, false otherwise"
                    },
                    "internalElb": {
                        "type": "boolean",
                        "description": "Set to true if load balancer is an internal load balancer or false for an Internet-facing load balancer. More information here: https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/elb-internal-load-balancers.html Setting this parameter to true requires that isPrivate is set to true. If the private subnet selected is not configured to route IP packets through a VPN, then an httpProxy is required for node communications to work"
                    },
                    "azs": {
                        "type": "array",
                        "description": "Availability zone(s) the cluster is deployed in",
                        "items": {
                            "type": "string"
                        }
                    },
                    "httpProxy": {
                        "type": "string",
                        "description": "The http proxy used for node communications. This parameter is required when internalElb is set to true and the private subnet selected does not route IP packets to the internet through a VPN"
                    },
                    "privateSubnets": {
                        "type": "array",
                        "description": "The private subnet ID to which the cluster is deployed. This parameter is optional if vpc (VPC ID) is set. This parameter is required if vpc (VPC ID) is set and isPrivate is set to true. This parameter is ignored if vpc (VPC ID) is not set",
                        "items": {
                            "type": "string"
                        }
                    },
                    "subnets": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "description": "The public subnet ID to which the cluster is deployed. This parameter is required if vpc (VPC ID) is set and isPrivate is set to false (Public topology). This parameter is required if vpc (VPC ID) is set and isPrivate is set to true (Private topology). This parameter is optional if vpc (VPC ID) is set and isPrivate is set to true and internalElb is set to true (VPN topology). This parameter is ignored if vpc (VPC ID) is not set"
                        }
                    },
                    "vpc": {
                        "type": "string",
                        "description": "If set, creates cluster using this VPC ID. Otherwise, the cluster is deployed on a new VPC. This parameter is required if internalElb is set to true"
                    },
                    "customAmi": {
                        "type": "string",
                        "description": "The custom ami name which can be specified by a user"
                    }
                }
            },
            "nodepool": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the node pool"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "UUID of the node pool"
                    },
                    "cloudProviderUuid": {
                        "type": "string",
                        "description": "UUID of the associated cloud provider"
                    },
                    "cloudProviderName": {
                        "type": "string",
                        "description": "Name of the associated cloud provider"
                    }
                }
            },
            "cloudprovider": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the cloud provider account"
                    },
                    "uuid": {
                        "type": "string",
                        "description": "UUID of the cloud provider account"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the cloud provider account"
                    },
                    "nodePoolUuid": {
                        "type": "string",
                        "description": "UUID of the associated node pool"
                    }
                }
            },
            "cloudprovider_for_post": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the cloud provider account"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the cloud provider account"
                    },
                    "key": {
                        "type": "string",
                        "description": "Cloud access key"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Cloud secret key"
                    }
                }
            },
            "cloudprovider_for_put": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the cloud provider account"
                    },
                    "key": {
                        "type": "string",
                        "description": "Cloud access key"
                    },
                    "secret": {
                        "type": "string",
                        "description": "Cloud secret key"
                    }
                }
            },
            "cluster_uuid_detail": {
                "type": "object",
                "properties": {
                    "clusterUuid": {
                        "type": "string",
                        "description": "Value of this field must be set to null to detach the node"
                    }
                }
            },
            "rolling_restart_details": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "UUID of the node"
                    },
                    "runState": {
                        "type": "boolean",
                        "description": "True if the node is up"
                    }
                }
            },
            "webcli_token": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string",
                        "description": "Web cli token"
                    }
                }
            },
            "attach_nodes_array": {
                "type": "array",
                "items": {
                    "required": [
                        "uuid"
                    ],
                    "type": "object",
                    "properties": {
                        "uuid": {
                            "type": "string",
                            "description": "UUID of the node"
                        },
                        "isMaster": {
                            "type": "boolean",
                            "description": "true if the node should be attached as master, false otherwise."
                        }
                    }
                }
            },
            "detach_nodes_array": {
                "type": "array",
                "items": {
                    "required": [
                        "uuid"
                    ],
                    "type": "object",
                    "properties": {
                        "uuid": {
                            "type": "string",
                            "description": "UUID of the node"
                        },
                        "isMaster": {
                            "type": "boolean",
                            "description": "true if the node should be attached as master, false otherwise."
                        }
                    }
                }
            },
            "etcd_backup_for_get": {
                "type": "object",
                "properties": {
                    "isEtcdBackupEnabled": {
                        "type": "boolean",
                        "description": "Set to true if etcd backup should be enabled, false otherwise"
                    },
                    "intervalInMins": {
                        "type": "integer",
                        "description": "etcd backup interval, specified in minutes"
                    },
                    "intervalInHours": {
                        "type": "integer",
                        "description": "etcd backup interval, specified in Hours"
                    },
                    "dailyBackupTime": {
                        "type": "string",
                        "description": "etcd backup Timestamp for daily backup, specified in format 'HH:MM' "
                    },
                    "maxIntervalBackupCount": {
                        "type": "integer",
                        "description": "max number of Backups retention for interval type backups"
                    },
                    "maxTimestampBackupCount": {
                        "type": "integer",
                        "description": "max number of Backups retention for Timestamp type backups"
                    },
                    "storageType": {
                        "type": "string",
                        "description": "Storage type for the etcd backup. Only 'local' is current supported type. 'local' saves backup to the node's local disk"
                    },
                    "storageProperties": {
                        "$ref": "#/components/schemas/etcdbackup_storageproperties"
                    },
                    "taskStatus": {
                        "type": "string",
                        "description": "Status indicating whether the backup cron job on the Kubernetes cluster was successfully setup. Can be 'success' or 'error'"
                    },
                    "taskErrorDetail": {
                        "type": "string",
                        "description": "Details of the error occurred of the taskStatus returned is 'error'"
                    }
                }
            }
        }
    },
    "x-original-swagger-version": "2.0"
}